package radio_gatun

import (
    "bytes"
    "testing"
    "encoding/hex"
)

func fromHex(s string) []byte {
    h, _ := hex.DecodeString(s)
    return h
}

func fromString(s string) []byte {
    return []byte(s)
}

type testData struct {
    msg []byte
    md []byte
}

func Test_Hash32_Check(t *testing.T) {
   tests := []testData{
        {
           fromString(""),
           fromHex("F30028B54AFAB6B3E55355D277711109A19BEDA7091067E9A492FB5ED9F20117"),
        },
        {
           fromString("0"),
           fromHex("AF0D3F51B98E90EEEBAE86DD0B304A4003AC5F755FA2CAC2B6866A0A91C5C752"),
        },
        {
           fromString("1"),
           fromHex("896C580EF77A68C36B040DCD5A650C09B8B5D915ECE298AD0210A21ED5811C95"),
        },
        {
           fromString("12"),
           fromHex("A7FDB34FD5D85D564A62C0B1B1B60CFA3D7A0C778231C95CDCD9BD293CCA16C6"),
        },
        {
           fromString("123456"),
           fromHex("862B75D2E8E7F08F93812168502AF97BCE530C66688D4372A08EEA0951B5024A"),
        },
        {
           fromString("12345678901234567"),
           fromHex("D52161B6BB583955B1ABB5781D2044BE8F4174904241533973C66B87880EDB53"),
        },
        {
           fromString("Santa Barbara, California"),
           fromHex("041666388EF9655D48996A66DADA1193D6646012A7B25A24FB10E6075CF0FC54"),
        },
        {
           fromString("In response to the SHA-1 vulnerability that was announced in Feb. 2005, NIST held a Cryptographic Hash Workshop on Oct. 31-Nov. 1, 2005 to solicit public input on its cryptographic hash function policy and standards. NIST continues to recommend a transition from SHA-1 to the larger approved hash functions (SHA-224, SHA-256, SHA-384, and SHA-512). In response to the workshop, NIST has also decided that it would be prudent in the long-term to develop an additional hash function through a public competition, similar to the development process for the block cipher in the Advanced Encryption Standard (AES)."),
           fromHex("4311D3CDC46EFE38FDB5C3023A160C3069B26A2AF0CE0CCAAFFA3F3C61629AD6"),
        },
        {
           fromString
           fromHex("849E6159D45AC1E99BC0D613D71C9E2DA639580CCFDC8013EE81D4E32AAD9C25"),
        },
    }

    h := New32()

    for i, test := range tests {
        h.Reset()
        h.Write(test.msg)
        sum := h.Sum(nil)

        if !bytes.Equal(sum, test.md) {
            t.Errorf("[%d] New32 fail, got %x, want %x", i, sum, test.md)
        }

        // =====

        sum2 := Sum32(test.msg)

        if !bytes.Equal(sum2[:], test.md) {
            t.Errorf("[%d] Sum32 fail, got %x, want %x", i, sum2, test.md)
        }
    }
}

func Test_Hash64_Check(t *testing.T) {
   tests := []testData{
        {
           fromString(""),
           fromHex("64A9A7FA139905B57BDAB35D33AA216370D5EAE13E77BFCDD85513408311A584"),
        },
        {
           fromString("0"),
           fromHex("5DB6B188AFEF88AD8D2E426105ACFFCD42EE439CC26275D11F87B530DE94D066"),
        },
        {
           fromString("1"),
           fromHex("3A3D7A7B79D1EC5A4DB4DC032B685574F7CA7517105F1634B61A34AA2575FCD3"),
        },
        {
           fromString("12"),
           fromHex("BA12168F91F5C124F8AE3908815DC7F3FBF6BCF6E3C66BB8507B16B9B269541E"),
        },
        {
           fromString("123456"),
           fromHex("1A41026D8183CB13B39819ACD5281617A25BE557C9C09E939F07EEC72347CE34"),
        },
        {
           fromString("12345678901234567"),
           fromHex("A0C5AC2493B71A5E9A4D41DD1854DAC0383193BAE0B5E7CA035F86AD052F46AA"),
        },
        {
           fromString("Santa Barbara, California"),
           fromHex("0D08DAF2354FA95AAA5B6A50F514384ECDD35940252E0631002E600E13CD285F"),
        },
        {
           fromString("In response to the SHA-1 vulnerability that was announced in Feb. 2005, NIST held a Cryptographic Hash Workshop on Oct. 31-Nov. 1, 2005 to solicit public input on its cryptographic hash function policy and standards. NIST continues to recommend a transition from SHA-1 to the larger approved hash functions (SHA-224, SHA-256, SHA-384, and SHA-512). In response to the workshop, NIST has also decided that it would be prudent in the long-term to develop an additional hash function through a public competition, similar to the development process for the block cipher in the Advanced Encryption Standard (AES)."),
           fromHex("2C9EC1EFC5D2FEEFFC2817CD571F394328111DB8068FC79E2FB84A42416BF5D3"),
        },
        {
           fromString
           fromHex("5B62F66DBF00028A2360E80D7D1AF240C8342C38C8F1674BF7E720AD6FC9EC55"),
        },
    }

    h := New64()

    for i, test := range tests {
        h.Reset()
        h.Write(test.msg)
        sum := h.Sum(nil)

        if !bytes.Equal(sum, test.md) {
            t.Errorf("[%d] New64 fail, got %x, want %x", i, sum, test.md)
        }

        // =====

        sum2 := Sum64(test.msg)

        if !bytes.Equal(sum2[:], test.md) {
            t.Errorf("[%d] Sum64 fail, got %x, want %x", i, sum2, test.md)
        }
    }
}
