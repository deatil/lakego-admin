package mgm

import (
    "bytes"
    "testing"
    "testing/quick"
    "crypto/rand"
    "crypto/cipher"

    "github.com/deatil/go-cryptobin/cipher/kuznyechik"
)

func Test_Vector(t *testing.T) {
    key := []byte{
        0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    }
    additionalData := []byte{
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0xEA, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
        0x05,
    }
    plaintext := []byte{
        0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
        0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xEE, 0xFF, 0x0A,
        0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
        0x99, 0xAA, 0xBB, 0xCC, 0xEE, 0xFF, 0x0A, 0x00,
        0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xAA, 0xBB, 0xCC, 0xEE, 0xFF, 0x0A, 0x00, 0x11,
        0xAA, 0xBB, 0xCC,
    }
    c, _ := kuznyechik.NewCipher(key)
    nonce := plaintext[:16]
    aead, _ := NewMGM(c)
    sealed := aead.Seal(nil, nonce, plaintext, additionalData)
    if !bytes.Equal(sealed[:len(plaintext)], []byte{
        0xA9, 0x75, 0x7B, 0x81, 0x47, 0x95, 0x6E, 0x90,
        0x55, 0xB8, 0xA3, 0x3D, 0xE8, 0x9F, 0x42, 0xFC,
        0x80, 0x75, 0xD2, 0x21, 0x2B, 0xF9, 0xFD, 0x5B,
        0xD3, 0xF7, 0x06, 0x9A, 0xAD, 0xC1, 0x6B, 0x39,
        0x49, 0x7A, 0xB1, 0x59, 0x15, 0xA6, 0xBA, 0x85,
        0x93, 0x6B, 0x5D, 0x0E, 0xA9, 0xF6, 0x85, 0x1C,
        0xC6, 0x0C, 0x14, 0xD4, 0xD3, 0xF8, 0x83, 0xD0,
        0xAB, 0x94, 0x42, 0x06, 0x95, 0xC7, 0x6D, 0xEB,
        0x2C, 0x75, 0x52,
    }) {
        t.FailNow()
    }
    if !bytes.Equal(sealed[len(plaintext):], []byte{
        0xCF, 0x5D, 0x65, 0x6F, 0x40, 0xC3, 0x4F, 0x5C,
        0x46, 0xE8, 0xBB, 0x0E, 0x29, 0xFC, 0xDB, 0x4C,
    }) {
        t.FailNow()
    }
    _, err := aead.Open(sealed[:0], nonce, sealed, additionalData)
    if err != nil {
        t.FailNow()
    }
    if !bytes.Equal(sealed[:len(plaintext)], plaintext) {
        t.FailNow()
    }
}

func test_Symmetric(t *testing.T) {
    sym := func(keySize, blockSize int, c cipher.Block, nonce []byte) {
        f := func(
            plaintext, additionalData []byte,
            initials [][]byte,
            tagSize uint8,
        ) bool {
            if len(plaintext) == 0 && len(additionalData) == 0 {
                return true
            }
            tagSize = 4 + tagSize%uint8(blockSize-4)

            aead, err := NewMGM(c)
            if err != nil {
                return false
            }
            for _, initial := range initials {
                sealed := aead.Seal(initial, nonce, plaintext, additionalData)
                if !bytes.Equal(sealed[:len(initial)], initial) {
                    return false
                }
                pt, err := aead.Open(
                    sealed[:0],
                    nonce,
                    sealed[len(initial):],
                    additionalData,
                )
                if err != nil || !bytes.Equal(pt, plaintext) {
                    return false
                }
            }
            return true
        }
        if err := quick.Check(f, nil); err != nil {
            t.Error(err)
        }
    }

    key128 := new([32]byte)
    if _, err := rand.Read(key128[:]); err != nil {
        panic(err)
    }
    nonce := make([]byte, kuznyechik.BlockSize)
    if _, err := rand.Read(key128[1:]); err != nil {
        panic(err)
    }

    cip, _ := kuznyechik.NewCipher(key128[:])

    sym(
        32,
        kuznyechik.BlockSize,
        cip,
        nonce[:kuznyechik.BlockSize],
    )
}
