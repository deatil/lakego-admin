package ecdsa

import (
    "io"
    "bytes"
    "testing"
    "math/big"
    "crypto/rand"
    "crypto/ecdsa"
    "crypto/sha256"
    "crypto/sha512"
    "crypto/elliptic"
)

func testCurve(t *testing.T, csprng io.Reader, curve elliptic.Curve, h Hasher) {
    priv, err := ecdsa.GenerateKey(curve, rand.Reader)
    if err != nil {
        t.Fatal(err)
    }

    msg := []byte("test")

    newHash := h()
    newHash.Write(msg)
    hash := newHash.Sum(nil)

    r, s, err := DSign(priv, csprng, hash, h)
    if err != nil {
        t.Fatal(err)
    }

    if !ecdsa.Verify(&priv.PublicKey, hash, r, s) {
        t.Fatal("signature didn't verify.")
    }
}

func Test_P256(t *testing.T) {
    t.Run("P256", func(t *testing.T) {
        testCurve(t, rand.Reader, elliptic.P256(), sha256.New)
    })

    t.Run("Decdsa P256", func(t *testing.T) {
        testCurve(t, nil, elliptic.P256(), sha256.New)
    })
}

func testCurve2(t *testing.T, csprng io.Reader, curve elliptic.Curve, h Hasher) {
    priv, err := ecdsa.GenerateKey(curve, rand.Reader)
    if err != nil {
        t.Fatal(err)
    }

    msg := []byte("test")

    newHash := h()
    newHash.Write(msg)
    hash := newHash.Sum(nil)

    sig, err := DSignASN1(priv, csprng, hash, h)
    if err != nil {
        t.Fatal(err)
    }

    if !ecdsa.VerifyASN1(&priv.PublicKey, hash, sig) {
        t.Fatal("signature didn't verify.")
    }
}

func Test_P256_2(t *testing.T) {
    t.Run("P256", func(t *testing.T) {
        testCurve2(t, rand.Reader, elliptic.P256(), sha256.New)
    })

    t.Run("Decdsa P256", func(t *testing.T) {
        testCurve2(t, nil, elliptic.P256(), sha256.New)
    })
}

func parsePriv(c elliptic.Curve, key []byte) *ecdsa.PrivateKey {
    k := new(big.Int).SetBytes(key)

    priv := new(ecdsa.PrivateKey)
    priv.PublicKey.Curve = c
    priv.D = k
    priv.PublicKey.X, priv.PublicKey.Y = c.ScalarBaseMult(k.Bytes())

    return priv
}

func parseSig(curve elliptic.Curve, data []byte) (r, s *big.Int) {
    byteLen := (curve.Params().BitSize + 7) / 8

    r = new(big.Int).SetBytes(data[      0:  byteLen])
    s = new(big.Int).SetBytes(data[byteLen:2*byteLen])

    return
}

func Test_P256_Check(t *testing.T) {
    for _, td := range testDecdsas {
        t.Run(td.name, func(t *testing.T) {
            sig := td.sig
            privBytes := td.privBytes
            msg := []byte(td.msg)
            h := td.hash
            c := td.curve

            priv := parsePriv(c, privBytes)

            newHash := h()
            newHash.Write(msg)
            hash := newHash.Sum(nil)

            r, s := parseSig(c, sig)

            if !ecdsa.Verify(&priv.PublicKey, hash, r, s) {
                t.Fatal("signature didn't verify.")
            }

            sig2, err := DSignBytes(priv, nil, hash, h)
            if err != nil {
                t.Fatal(err)
            }

            if !bytes.Equal(sig2, sig) {
                t.Errorf("DSignBytes fail, got %x, want %x", sig2, sig)
            }

        })
    }
}

type testDecdsa struct {
    name string
    sig []byte
    privBytes []byte
    msg string
    hash Hasher
    curve elliptic.Curve
}

var testDecdsas = []testDecdsa{
    {
        name: "DECDSA-SHA224/SECP256R1 0",
        sig: []byte{
            0x53, 0xb2, 0xff, 0xf5, 0xd1, 0x75, 0x2b, 0x2c,
            0x68, 0x9d, 0xf2, 0x57, 0xc0, 0x4c, 0x40, 0xa5,
            0x87, 0xfa, 0xba, 0xbb, 0x3f, 0x6f, 0xc2, 0x70,
            0x2f, 0x13, 0x43, 0xaf, 0x7c, 0xa9, 0xaa, 0x3f,
            0xb9, 0xaf, 0xb6, 0x4f, 0xdc, 0x03, 0xdc, 0x1a,
            0x13, 0x1c, 0x7d, 0x23, 0x86, 0xd1, 0x1e, 0x34,
            0x9f, 0x07, 0x0a, 0xa4, 0x32, 0xa4, 0xac, 0xc9,
            0x18, 0xbe, 0xa9, 0x88, 0xbf, 0x75, 0xc7, 0x4c,
        },
        privBytes: []byte{
            0xc9, 0xaf, 0xa9, 0xd8, 0x45, 0xba, 0x75, 0x16,
            0x6b, 0x5c, 0x21, 0x57, 0x67, 0xb1, 0xd6, 0x93,
            0x4e, 0x50, 0xc3, 0xdb, 0x36, 0xe8, 0x9b, 0x12,
            0x7b, 0x8a, 0x62, 0x2b, 0x12, 0x0f, 0x67, 0x21,
        },
        msg: "sample",
        hash: sha256.New224,
        curve: elliptic.P256(),
    },
    {
        name: "DECDSA-SHA256/SECP256R1 0",
        sig: []byte{
            0xef, 0xd4, 0x8b, 0x2a, 0xac, 0xb6, 0xa8, 0xfd,
            0x11, 0x40, 0xdd, 0x9c, 0xd4, 0x5e, 0x81, 0xd6,
            0x9d, 0x2c, 0x87, 0x7b, 0x56, 0xaa, 0xf9, 0x91,
            0xc3, 0x4d, 0x0e, 0xa8, 0x4e, 0xaf, 0x37, 0x16,
            0xf7, 0xcb, 0x1c, 0x94, 0x2d, 0x65, 0x7c, 0x41,
            0xd4, 0x36, 0xc7, 0xa1, 0xb6, 0xe2, 0x9f, 0x65,
            0xf3, 0xe9, 0x00, 0xdb, 0xb9, 0xaf, 0xf4, 0x06,
            0x4d, 0xc4, 0xab, 0x2f, 0x84, 0x3a, 0xcd, 0xa8,
        },
        privBytes: []byte{
            0xc9, 0xaf, 0xa9, 0xd8, 0x45, 0xba, 0x75, 0x16,
            0x6b, 0x5c, 0x21, 0x57, 0x67, 0xb1, 0xd6, 0x93,
            0x4e, 0x50, 0xc3, 0xdb, 0x36, 0xe8, 0x9b, 0x12,
            0x7b, 0x8a, 0x62, 0x2b, 0x12, 0x0f, 0x67, 0x21,
        },
        msg: "sample",
        hash: sha256.New,
        curve: elliptic.P256(),
    },
    {
        name: "DECDSA-SHA384/SECP256R1 0",
        sig: []byte{
            0x0e, 0xaf, 0xea, 0x03, 0x9b, 0x20, 0xe9, 0xb4,
            0x23, 0x09, 0xfb, 0x1d, 0x89, 0xe2, 0x13, 0x05,
            0x7c, 0xbf, 0x97, 0x3d, 0xc0, 0xcf, 0xc8, 0xf1,
            0x29, 0xed, 0xdd, 0xc8, 0x00, 0xef, 0x77, 0x19,
            0x48, 0x61, 0xf0, 0x49, 0x1e, 0x69, 0x98, 0xb9,
            0x45, 0x51, 0x93, 0xe3, 0x4e, 0x7b, 0x0d, 0x28,
            0x4d, 0xdd, 0x71, 0x49, 0xa7, 0x4b, 0x95, 0xb9,
            0x26, 0x1f, 0x13, 0xab, 0xde, 0x94, 0x09, 0x54,
        },
        privBytes: []byte{
            0xc9, 0xaf, 0xa9, 0xd8, 0x45, 0xba, 0x75, 0x16,
            0x6b, 0x5c, 0x21, 0x57, 0x67, 0xb1, 0xd6, 0x93,
            0x4e, 0x50, 0xc3, 0xdb, 0x36, 0xe8, 0x9b, 0x12,
            0x7b, 0x8a, 0x62, 0x2b, 0x12, 0x0f, 0x67, 0x21,
        },
        msg: "sample",
        hash: sha512.New384,
        curve: elliptic.P256(),
    },
    {
        name: "DECDSA-SHA512/SECP256R1 0",
        sig: []byte{
            0x84, 0x96, 0xa6, 0x0b, 0x5e, 0x9b, 0x47, 0xc8,
            0x25, 0x48, 0x88, 0x27, 0xe0, 0x49, 0x5b, 0x0e,
            0x3f, 0xa1, 0x09, 0xec, 0x45, 0x68, 0xfd, 0x3f,
            0x8d, 0x10, 0x97, 0x67, 0x8e, 0xb9, 0x7f, 0x00,
            0x23, 0x62, 0xab, 0x1a, 0xdb, 0xe2, 0xb8, 0xad,
            0xf9, 0xcb, 0x9e, 0xda, 0xb7, 0x40, 0xea, 0x60,
            0x49, 0xc0, 0x28, 0x11, 0x4f, 0x24, 0x60, 0xf9,
            0x65, 0x54, 0xf6, 0x1f, 0xae, 0x33, 0x02, 0xfe,
        },
        privBytes: []byte{
            0xc9, 0xaf, 0xa9, 0xd8, 0x45, 0xba, 0x75, 0x16,
            0x6b, 0x5c, 0x21, 0x57, 0x67, 0xb1, 0xd6, 0x93,
            0x4e, 0x50, 0xc3, 0xdb, 0x36, 0xe8, 0x9b, 0x12,
            0x7b, 0x8a, 0x62, 0x2b, 0x12, 0x0f, 0x67, 0x21,
        },
        msg: "sample",
        hash: sha512.New,
        curve: elliptic.P256(),
    },

    {
        name: "DECDSA-SHA224/SECP256R1 1",
        sig: []byte{
            0xc3, 0x7e, 0xdb, 0x6f, 0x0a, 0xe7, 0x9d, 0x47,
            0xc3, 0xc2, 0x7e, 0x96, 0x2f, 0xa2, 0x69, 0xbb,
            0x4f, 0x44, 0x17, 0x70, 0x35, 0x7e, 0x11, 0x4e,
            0xe5, 0x11, 0xf6, 0x62, 0xec, 0x34, 0xa6, 0x92,
            0xc8, 0x20, 0x05, 0x3a, 0x05, 0x79, 0x1e, 0x52,
            0x1f, 0xca, 0xad, 0x60, 0x42, 0xd4, 0x0a, 0xea,
            0x1d, 0x6b, 0x1a, 0x54, 0x01, 0x38, 0x55, 0x8f,
            0x47, 0xd0, 0x71, 0x98, 0x00, 0xe1, 0x8f, 0x2d,
        },
        privBytes: []byte{
            0xc9, 0xaf, 0xa9, 0xd8, 0x45, 0xba, 0x75, 0x16,
            0x6b, 0x5c, 0x21, 0x57, 0x67, 0xb1, 0xd6, 0x93,
            0x4e, 0x50, 0xc3, 0xdb, 0x36, 0xe8, 0x9b, 0x12,
            0x7b, 0x8a, 0x62, 0x2b, 0x12, 0x0f, 0x67, 0x21,
        },
        msg: "test",
        hash: sha256.New224,
        curve: elliptic.P256(),
    },

    {
        name: "DECDSA-SHA256/SECP384R1 0",
        sig: []byte{
            0x21, 0xb1, 0x3d, 0x1e, 0x01, 0x3c, 0x7f, 0xa1,
            0x39, 0x2d, 0x03, 0xc5, 0xf9, 0x9a, 0xf8, 0xb3,
            0x0c, 0x57, 0x0c, 0x6f, 0x98, 0xd4, 0xea, 0x8e,
            0x35, 0x4b, 0x63, 0xa2, 0x1d, 0x3d, 0xaa, 0x33,
            0xbd, 0xe1, 0xe8, 0x88, 0xe6, 0x33, 0x55, 0xd9,
            0x2f, 0xa2, 0xb3, 0xc3, 0x6d, 0x8f, 0xb2, 0xcd,
            0xf3, 0xaa, 0x44, 0x3f, 0xb1, 0x07, 0x74, 0x5b,
            0xf4, 0xbd, 0x77, 0xcb, 0x38, 0x91, 0x67, 0x46,
            0x32, 0x06, 0x8a, 0x10, 0xca, 0x67, 0xe3, 0xd4,
            0x5d, 0xb2, 0x26, 0x6f, 0xa7, 0xd1, 0xfe, 0xeb,
            0xef, 0xdc, 0x63, 0xec, 0xcd, 0x1a, 0xc4, 0x2e,
            0xc0, 0xcb, 0x86, 0x68, 0xa4, 0xfa, 0x0a, 0xb0,
        },
        privBytes: []byte{
            0x6b, 0x9d, 0x3d, 0xad, 0x2e, 0x1b, 0x8c, 0x1c,
            0x05, 0xb1, 0x98, 0x75, 0xb6, 0x65, 0x9f, 0x4d,
            0xe2, 0x3c, 0x3b, 0x66, 0x7b, 0xf2, 0x97, 0xba,
            0x9a, 0xa4, 0x77, 0x40, 0x78, 0x71, 0x37, 0xd8,
            0x96, 0xd5, 0x72, 0x4e, 0x4c, 0x70, 0xa8, 0x25,
            0xf8, 0x72, 0xc9, 0xea, 0x60, 0xd2, 0xed, 0xf5,
        },
        msg: "sample",
        hash: sha256.New,
        curve: elliptic.P384(),
    },

    {
        name: "DECDSA-SHA256/SECP521R1 0",
        sig: []byte{
            0x01, 0x51, 0x1b, 0xb4, 0xd6, 0x75, 0x11, 0x4f,
            0xe2, 0x66, 0xfc, 0x43, 0x72, 0xb8, 0x76, 0x82,
            0xba, 0xec, 0xc0, 0x1d, 0x3c, 0xc6, 0x2c, 0xf2,
            0x30, 0x3c, 0x92, 0xb3, 0x52, 0x60, 0x12, 0x65,
            0x9d, 0x16, 0x87, 0x6e, 0x25, 0xc7, 0xc1, 0xe5,
            0x76, 0x48, 0xf2, 0x3b, 0x73, 0x56, 0x4d, 0x67,
            0xf6, 0x1c, 0x6f, 0x14, 0xd5, 0x27, 0xd5, 0x49,
            0x72, 0x81, 0x04, 0x21, 0xe7, 0xd8, 0x75, 0x89,
            0xe1, 0xa7, 0x00, 0x4a, 0x17, 0x11, 0x43, 0xa8,
            0x31, 0x63, 0xd6, 0xdf, 0x46, 0x0a, 0xaf, 0x61,
            0x52, 0x26, 0x95, 0xf2, 0x07, 0xa5, 0x8b, 0x95,
            0xc0, 0x64, 0x4d, 0x87, 0xe5, 0x2a, 0xa1, 0xa3,
            0x47, 0x91, 0x6e, 0x4f, 0x7a, 0x72, 0x93, 0x0b,
            0x1b, 0xc0, 0x6d, 0xbe, 0x22, 0xce, 0x3f, 0x58,
            0x26, 0x4a, 0xfd, 0x23, 0x70, 0x4c, 0xbb, 0x63,
            0xb2, 0x9b, 0x93, 0x1f, 0x7d, 0xe6, 0xc9, 0xd9,
            0x49, 0xa7, 0xec, 0xfc,
        },
        privBytes: []byte{
            0x00, 0xfa, 0xd0, 0x6d, 0xaa, 0x62, 0xba, 0x3b,
            0x25, 0xd2, 0xfb, 0x40, 0x13, 0x3d, 0xa7, 0x57,
            0x20, 0x5d, 0xe6, 0x7f, 0x5b, 0xb0, 0x01, 0x8f,
            0xee, 0x8c, 0x86, 0xe1, 0xb6, 0x8c, 0x7e, 0x75,
            0xca, 0xa8, 0x96, 0xeb, 0x32, 0xf1, 0xf4, 0x7c,
            0x70, 0x85, 0x58, 0x36, 0xa6, 0xd1, 0x6f, 0xcc,
            0x14, 0x66, 0xf6, 0xd8, 0xfb, 0xec, 0x67, 0xdb,
            0x89, 0xec, 0x0c, 0x08, 0xb0, 0xe9, 0x96, 0xb8,
            0x35, 0x38,
        },
        msg: "sample",
        hash: sha256.New,
        curve: elliptic.P521(),
    },
    {
        name: "DECDSA-SHA384/SECP521R1 0",
        sig: []byte{
            0x01, 0xea, 0x84, 0x2a, 0x0e, 0x17, 0xd2, 0xde,
            0x4f, 0x92, 0xc1, 0x53, 0x15, 0xc6, 0x3d, 0xdf,
            0x72, 0x68, 0x5c, 0x18, 0x19, 0x5c, 0x2b, 0xb9,
            0x5e, 0x57, 0x2b, 0x9c, 0x51, 0x36, 0xca, 0x4b,
            0x4b, 0x57, 0x6a, 0xd7, 0x12, 0xa5, 0x2b, 0xe9,
            0x73, 0x06, 0x27, 0xd1, 0x60, 0x54, 0xba, 0x40,
            0xcc, 0x0b, 0x8d, 0x3f, 0xf0, 0x35, 0xb1, 0x2a,
            0xe7, 0x51, 0x68, 0x39, 0x7f, 0x5d, 0x50, 0xc6,
            0x74, 0x51, 0x01, 0xf2, 0x1a, 0x3c, 0xee, 0x06,
            0x6e, 0x19, 0x61, 0x02, 0x5f, 0xb0, 0x48, 0xbd,
            0x5f, 0xe2, 0xb7, 0x92, 0x4d, 0x0c, 0xd7, 0x97,
            0xba, 0xbe, 0x0a, 0x83, 0xb6, 0x6f, 0x1e, 0x35,
            0xee, 0xaf, 0x5f, 0xde, 0x14, 0x3f, 0xa8, 0x5d,
            0xc3, 0x94, 0xa7, 0xde, 0xe7, 0x66, 0x52, 0x33,
            0x93, 0x78, 0x44, 0x84, 0xbd, 0xf3, 0xe0, 0x01,
            0x14, 0xa1, 0xc8, 0x57, 0xcd, 0xe1, 0xaa, 0x20,
            0x3d, 0xb6, 0x5d, 0x61,
        },
        privBytes: []byte{
            0x00, 0xfa, 0xd0, 0x6d, 0xaa, 0x62, 0xba, 0x3b,
            0x25, 0xd2, 0xfb, 0x40, 0x13, 0x3d, 0xa7, 0x57,
            0x20, 0x5d, 0xe6, 0x7f, 0x5b, 0xb0, 0x01, 0x8f,
            0xee, 0x8c, 0x86, 0xe1, 0xb6, 0x8c, 0x7e, 0x75,
            0xca, 0xa8, 0x96, 0xeb, 0x32, 0xf1, 0xf4, 0x7c,
            0x70, 0x85, 0x58, 0x36, 0xa6, 0xd1, 0x6f, 0xcc,
            0x14, 0x66, 0xf6, 0xd8, 0xfb, 0xec, 0x67, 0xdb,
            0x89, 0xec, 0x0c, 0x08, 0xb0, 0xe9, 0x96, 0xb8,
            0x35, 0x38,
        },
        msg: "sample",
        hash: sha512.New384,
        curve: elliptic.P521(),
    },

}
