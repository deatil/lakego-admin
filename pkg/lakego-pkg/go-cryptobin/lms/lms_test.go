package lms

import (
    "testing"
    "crypto"
    "crypto/rand"
    "encoding/hex"

    "github.com/deatil/go-cryptobin/tool/test"
)

func Test_Interface(t *testing.T) {
    var _ crypto.Signer = &PrivateKey{}
    var _ crypto.SignerOpts = SignerOpts{}
}

func Test_PKTreeKAT1(t *testing.T) {
    assertError := test.AssertErrorT(t)
    assertEqual := test.AssertEqualT(t)

    seed, err := hex.DecodeString("558b8966c48ae9cb898b423c83443aae014a72f1b1ab5cc85cf1d892903b5439")
    if err != nil {
        panic(err)
    }

    id, err := hex.DecodeString("d08fabd4a2091ff0a8cb4ed834e74534")
    if err != nil {
        panic(err)
    }

    expected_k, err := hex.DecodeString("32a58885cd9ba0431235466bff9651c6c92124404d45fa53cf161c28f1ad5a8e")
    if err != nil {
        panic(err)
    }

    tc := LMS_SHA256_M32_H10_Param
    otstc := LMOTS_SHA256_N32_W4_Param

    lms_priv, err := GenerateKeyFromSeed(tc, otstc, ID(id), seed)
    assertError(err, "GenerateKeyFromSeed")

    lms_pub := lms_priv.PublicKey

    assertEqual(lms_pub.ID(), ID(id), "ID")
    assertEqual(lms_pub.Key(), expected_k, "Key")
}

func Test_BadPrivateKeyPanics(t *testing.T) {
    assertNotErrorNil := test.AssertNotErrorNilT(t)

    priv_bytes, err := hex.DecodeString(
        "000000060000000300000005" +
        "d08fabd4a2091ff0a8cb4ed834e74534" +
        "558b8966c48ae9cb898b423c83443aae014a72f1b1ab5cc85cf1d892903b5439",
    )
    if err != nil {
        panic(err)
    }

    // This should panic
    priv_bytes[6] = 0xff
    _, err = NewPrivateKeyFromBytes(priv_bytes)
    assertNotErrorNil(err, "NewPrivateKeyFromBytes")
}

func Test_ShortPrivateKeyReturnsError(t *testing.T) {
    assertNotErrorNil := test.AssertNotErrorNilT(t)

    priv_bytes, err := hex.DecodeString("000000060000000300000005d08fabd4a2091ff0a8cb4ed834e74534")
    if err != nil {
        panic(err)
    }

    _, err = NewPrivateKeyFromBytes(priv_bytes)
    assertNotErrorNil(err, "NewPrivateKeyFromBytes")
}

func Test_SignKAT1(t *testing.T) {
    assertError := test.AssertErrorT(t)
    assertEqual := test.AssertEqualT(t)
    assertBool := test.AssertBoolT(t)
    assertNotBool := test.AssertNotBoolT(t)

    lms_priv_bytes, err := hex.DecodeString(
        "000000060000000300000005" +
        "d08fabd4a2091ff0a8cb4ed834e74534" +
        "558b8966c48ae9cb898b423c83443aae014a72f1b1ab5cc85cf1d892903b5439",
    )
    if err != nil {
        panic(err)
    }

    lms_priv, err := NewPrivateKeyFromBytes(lms_priv_bytes)
    if err != nil {
        panic(err)
    }

    assertEqual(lms_priv.Q(), uint32(5), "lms_priv.Q")

    reserialized := lms_priv.ToBytes()
    assertEqual(reserialized, lms_priv_bytes, "lms_priv_bytes")

    // Test an actual signed message
    msg, err := hex.DecodeString(
        "54686520706f77657273206e6f742064" +
        "656c65676174656420746f2074686520" +
        "556e6974656420537461746573206279" +
        "2074686520436f6e737469747574696f" +
        "6e2c206e6f722070726f686962697465" +
        "6420627920697420746f207468652053" +
        "74617465732c20617265207265736572" +
        "76656420746f20746865205374617465" +
        "7320726573706563746976656c792c20" +
        "6f7220746f207468652070656f706c65" +
        "2e0a",
    )
    if err != nil {
        panic(err)
    }

    // Generate a signature
    sig, err := lms_priv.SignToSignature(rand.Reader, msg, nil)
    assertError(err, "SignToSignature")

    // Assert incremented
    assertEqual(lms_priv.Q(), uint32(6), "priv.Q")

    // Get the public key
    lms_public := lms_priv.PublicKey
    expected_public_key, err := hex.DecodeString(
        "0000000600000003" +
        "d08fabd4a2091ff0a8cb4ed834e74534" +
        "32a58885cd9ba0431235466bff9651c6" +
        "c92124404d45fa53cf161c28f1ad5a8e",
    )
    if err != nil {
        panic(err)
    }
    assertEqual(expected_public_key, lms_public.ToBytes(), "public_key")

    // VerifyWithSignature the signature is true
    result := lms_public.VerifyWithSignature(msg, sig)
    assertBool(result, "public.VerifyWithSignature")

    // Is the signature as long as we expect?
    sigbytes, err := sig.ToBytes()
    if err != nil {
        panic(err)
    }
    siglen := len(sigbytes)
    assertEqual(2508, siglen, "siglen")

    // Let's change the signature, then ensure it returns false
    // We use XOR to flip the last bit
    sigbytes[siglen-1] ^= 1
    sig2, err := NewSignatureFromBytes(sigbytes)
    if err != nil {
        panic(err)
    }

    // Flipping a bit in the signature should yield a false
    result = lms_public.VerifyWithSignature(msg, sig2)
    assertNotBool(result, "public.VerifyWithSignature bad")
}

func Test_Verify(t *testing.T) {
    assertBool := test.AssertBoolT(t)
    assertNotBool := test.AssertNotBoolT(t)

    // Decode from hex
    pubkeybytes, err := hex.DecodeString(
        "0000000500000004" +
        "d08fabd4a2091ff0a8cb4ed834e74534" +
        "8b9a583d74439771b52302706a4463e3" +
        "e342a868bcb02f698f6316b6d92279f8",
    )
    if err != nil {
        panic(err)
    }

    msg, err := hex.DecodeString(
        "54686520656e756d65726174696f6e20696e2074686520436f6e737469747574696f6e2c206f66206365727461696e207269676874732c207368616c6c206e6f7420626520636f6e73747275656420746f2064656e79206f7220646973706172616765206f74686572732072657461696e6564206279207468652070656f706c652e0a",
    )
    if err != nil {
        panic(err)
    }

    sigbytes, err := hex.DecodeString(
        "00000000000000040eb1ed54a2460d512388cad533138d240534e97b1e82d33bd927d201dfc24ebb0f43ba3ce13b058b3a4ea791ff0233fe67acf9761de946e5f447c9438cffa207a5093d2f01fa83ab4b9833348ab13cd5911cee2ef7ee72de172a59193b350021bfa1f5412de16430884a5b3833b07af15f56b1a2776887fec4a4ffbe90483c4fd15c05076fb3eafd6492375fe8ac3bd6724f09ec5ea6d8ad5a2f489d0c95bb552987e2e66b49dd899b040f07cf348a56945a17ba0e92a652b0aea6aceb0a081b7e8956069e4ca4c23e41b1c828f0b9568a316db7befde420e6508146280b7ca995489c54d3213f22a6fa378aabe304499df562f251f8c3d150a2cb2ea7cd159994fed104b6708814a3b974df688277da343a7b00060e049bf169cf2984fe5b88995229ef1535256dc67904808ded2ad6445edb25a9a4721c89af6a431e3cca7ae670601efccb251355c019b54113dfc7af43347b3157ecc2c7d371ac83cda5a91805046592a931674992528743e027cb68a3f0916de2ef8faaf85f656da7d332e0f5ed4d974a8b8a2078218754d9c7f4c1b920887b2aa3b2709bdf14c4a7a5021845c11799633f51eba25e4d530b6d8539258ebbc7d3fe3e55a4b335f37111dd99e7b6f6f44ec5c403f279da4fc60bde80e589001bca12c74ef01addf49f414c12d6718ffd0f178f60f21f883799210f01ed282e41073ef042c15cda541a2c1ea3c6760afc4da4e72891c12401a4c009b3fb692b3e90381febf118fa3507ca754a8f57ffd575574afbc1f3033d714ed18d88e35ce7203192134c016ee37eb5874056d4aaf4503dccba8dd6dd9a9b9257bf4ab9bced8dc5b43baf59ab2b9f39b12ae20ad0f24128927d9ba3d70459ed55d15dbae96783d5ed7344613f0b867ab45a67d44c09ee56c192277176b06168d5e64d6eb6b59550a836d6599955b164e375f7c62d827769adb1041c7caf23a686d22236e6d5fbc1452a320d673fa56e48223f1b1ee7beb4914556329d9a5467467709865023d8d18cd0707e78a457271bbb296ff74f6d0339613dd078444eb087cace78abbed8acc4a09f6867fd3c28ec948c945ed0b360eceecd561349d342060f7172c396a063a23b5c60340c62149eded0f068d75b19fa680890dcf1c4868f1f83cf63f6bd6a5c15a8e68f1f62a10d372c9bd3fbdbe6dd2ca090610afd7ed0bd30b1488deeddd7d0c1ee9312354355025a8555d77a3b711e005544d997334a580a82be82cf2e8da5d82c58fba775bb7421c433e80f4ddb53ac13e8fc3e3ab38f57cdddb09661f14a6994fd71c7944b57c73a52b3dd1cd9bb85e551db196371baa04c466be5c4306358c51b3a5a3c71ad50d3b4e969aee67fe60c77614de1402e1c54d0bd99291e16d2936da9c21f52e65bbc38a79568cafe7617918f4b05a01c56c17fc473d6da9dc28bae1c15d7f467ad305e122a2d6231b2ba80bf1308d2008728cc53999a368d23222cb1d0c783d223b9b503651a67560bfeb2f35ba544722620ec4086dcc77e6e87bb53f1f18cb843df77057ce113723c7cd09bad2a656a689a841d8ae0f7f47a1e0ed5294858000000058f10e6d54680f6e1bcbf5dbcb9c1d1628323b71c7247d6536858cb87dd52628955d38bb6d66d7f3c300e73b6dae29c30f474426590645ab69f7d317878ad0efbba2c6dc673188e75420b6b08350c8d269988a9cb106f5a70ef38f127b89e6addfd9aab02995e67e2ca5b8129a635b9429e7fb1606931047509a4240c425ac412fa4f51344dceef63bfd8d70fc2874f740ba8f9e77485958ddafb03c9f76a9580",
    )
    if err != nil {
        panic(err)
    }

    publickey, err := NewPublicKeyFromBytes(pubkeybytes)
    if err != nil {
        panic(err)
    }

    sig, err := NewSignatureFromBytes(sigbytes)
    if err != nil {
        panic(err)
    }

    result := publickey.VerifyWithSignature(msg, sig)
    assertBool(result, "VerifyWithSignature")

    // If we change the signature, it should fail
    sigbytes[3]++
    sig, err = NewSignatureFromBytes(sigbytes)
    if err != nil {
        panic(err)
    }

    result = publickey.VerifyWithSignature(msg, sig)
    assertNotBool(result, "VerifyWithSignature bad")
}

func Test_ShortPublicKeyReturnsError(t *testing.T) {
    assertNotErrorNil := test.AssertNotErrorNilT(t)

    // Less than 8 bytes
    pub_bytes, err := hex.DecodeString("01020304050607")
    if err != nil {
        panic(err)
    }

    _, err = NewPublicKeyFromBytes(pub_bytes)
    assertNotErrorNil(err, "NewPublicKeyFromBytes")
}

func Test_Encode(t *testing.T) {
    assertEqual := test.AssertEqualT(t)
    assertError := test.AssertErrorT(t)
    assertNotErrorNil := test.AssertNotErrorNilT(t)

    // Decode from hex
    pubkeybytes, err := hex.DecodeString(
        "0000000500000004" +
        "d08fabd4a2091ff0a8cb4ed834e74534" +
        "8b9a583d74439771b52302706a4463e3" +
        "e342a868bcb02f698f6316b6d92279f8",
    )
    if err != nil {
        panic(err)
    }

    pubkey, err := NewPublicKeyFromBytes(pubkeybytes)
    assertError(err, "NewPublicKeyFromBytes")

    bytes2 := pubkey.ToBytes()
    assertEqual(pubkeybytes, bytes2, "pubkey.ToBytes")

    bytes2[0] = 0xff
    _, err = NewPublicKeyFromBytes(bytes2)
    assertNotErrorNil(err, "NewPublicKeyFromBytes")
}

func Test_Rfc8554KAT2(t *testing.T) {
    assertBool := test.AssertBoolT(t)

    var lms_public_key_bytes []byte = []byte{
        0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04,
        0x21, 0x5f, 0x83, 0xb7, 0xcc, 0xb9, 0xac, 0xbc,
        0xd0, 0x8d, 0xb9, 0x7b, 0x0d, 0x04, 0xdc, 0x2b,
        0xa1, 0xcd, 0x03, 0x58, 0x33, 0xe0, 0xe9, 0x00,
        0x59, 0x60, 0x3f, 0x26, 0xe0, 0x7a, 0xd2, 0xaa,
        0xd1, 0x52, 0x33, 0x8e, 0x7a, 0x5e, 0x59, 0x84,
        0xbc, 0xd5, 0xf7, 0xbb, 0x4e, 0xba, 0x40, 0xb7,
    }

    var message_bytes []byte = []byte{
        0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x75, 0x6d,
        0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
        0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43,
        0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
        0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x6f, 0x66, 0x20,
        0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x20,
        0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x20,
        0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e,
        0x73, 0x74, 0x72, 0x75, 0x65, 0x64, 0x20, 0x74,
        0x6f, 0x20, 0x64, 0x65, 0x6e, 0x79, 0x20, 0x6f,
        0x72, 0x20, 0x64, 0x69, 0x73, 0x70, 0x61, 0x72,
        0x61, 0x67, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65,
        0x72, 0x73, 0x20, 0x72, 0x65, 0x74, 0x61, 0x69,
        0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74,
        0x68, 0x65, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c,
        0x65, 0x2e, 0x0a,
    }

    var hss_signature_bytes []byte = []byte{
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x03, 0x3d, 0x46, 0xbe, 0xe8,
        0x66, 0x0f, 0x8f, 0x21, 0x5d, 0x3f, 0x96, 0x40,
        0x8a, 0x7a, 0x64, 0xcf, 0x1c, 0x4d, 0xa0, 0x2b,
        0x63, 0xa5, 0x5f, 0x62, 0xc6, 0x66, 0xef, 0x57,
        0x07, 0xa9, 0x14, 0xce, 0x06, 0x74, 0xe8, 0xcb,
        0x7a, 0x55, 0xf0, 0xc4, 0x8d, 0x48, 0x4f, 0x31,
        0xf3, 0xaa, 0x4a, 0xf9, 0x71, 0x9a, 0x74, 0xf2,
        0x2c, 0xf8, 0x23, 0xb9, 0x44, 0x31, 0xd0, 0x1c,
        0x92, 0x6e, 0x2a, 0x76, 0xbb, 0x71, 0x22, 0x6d,
        0x27, 0x97, 0x00, 0xec, 0x81, 0xc9, 0xe9, 0x5f,
        0xb1, 0x1a, 0x0d, 0x10, 0xd0, 0x65, 0x27, 0x9a,
        0x57, 0x96, 0xe2, 0x65, 0xae, 0x17, 0x73, 0x7c,
        0x44, 0xeb, 0x8c, 0x59, 0x45, 0x08, 0xe1, 0x26,
        0xa9, 0xa7, 0x87, 0x0b, 0xf4, 0x36, 0x08, 0x20,
        0xbd, 0xeb, 0x9a, 0x01, 0xd9, 0x69, 0x37, 0x79,
        0xe4, 0x16, 0x82, 0x8e, 0x75, 0xbd, 0xdd, 0x7d,
        0x8c, 0x70, 0xd5, 0x0a, 0x0a, 0xc8, 0xba, 0x39,
        0x81, 0x09, 0x09, 0xd4, 0x45, 0xf4, 0x4c, 0xb5,
        0xbb, 0x58, 0xde, 0x73, 0x7e, 0x60, 0xcb, 0x43,
        0x45, 0x30, 0x27, 0x86, 0xef, 0x2c, 0x6b, 0x14,
        0xaf, 0x21, 0x2c, 0xa1, 0x9e, 0xde, 0xaa, 0x3b,
        0xfc, 0xfe, 0x8b, 0xaa, 0x66, 0x21, 0xce, 0x88,
        0x48, 0x0d, 0xf2, 0x37, 0x1d, 0xd3, 0x7a, 0xdd,
        0x73, 0x2c, 0x9d, 0xe4, 0xea, 0x2c, 0xe0, 0xdf,
        0xfa, 0x53, 0xc9, 0x26, 0x49, 0xa1, 0x8d, 0x39,
        0xa5, 0x07, 0x88, 0xf4, 0x65, 0x29, 0x87, 0xf2,
        0x26, 0xa1, 0xd4, 0x81, 0x68, 0x20, 0x5d, 0xf6,
        0xae, 0x7c, 0x58, 0xe0, 0x49, 0xa2, 0x5d, 0x49,
        0x07, 0xed, 0xc1, 0xaa, 0x90, 0xda, 0x8a, 0xa5,
        0xe5, 0xf7, 0x67, 0x17, 0x73, 0xe9, 0x41, 0xd8,
        0x05, 0x53, 0x60, 0x21, 0x5c, 0x6b, 0x60, 0xdd,
        0x35, 0x46, 0x3c, 0xf2, 0x24, 0x0a, 0x9c, 0x06,
        0xd6, 0x94, 0xe9, 0xcb, 0x54, 0xe7, 0xb1, 0xe1,
        0xbf, 0x49, 0x4d, 0x0d, 0x1a, 0x28, 0xc0, 0xd3,
        0x1a, 0xcc, 0x75, 0x16, 0x1f, 0x4f, 0x48, 0x5d,
        0xfd, 0x3c, 0xb9, 0x57, 0x8e, 0x83, 0x6e, 0xc2,
        0xdc, 0x72, 0x2f, 0x37, 0xed, 0x30, 0x87, 0x2e,
        0x07, 0xf2, 0xb8, 0xbd, 0x03, 0x74, 0xeb, 0x57,
        0xd2, 0x2c, 0x61, 0x4e, 0x09, 0x15, 0x0f, 0x6c,
        0x0d, 0x87, 0x74, 0xa3, 0x9a, 0x6e, 0x16, 0x82,
        0x11, 0x03, 0x5d, 0xc5, 0x29, 0x88, 0xab, 0x46,
        0xea, 0xca, 0x9e, 0xc5, 0x97, 0xfb, 0x18, 0xb4,
        0x93, 0x6e, 0x66, 0xef, 0x2f, 0x0d, 0xf2, 0x6e,
        0x8d, 0x1e, 0x34, 0xda, 0x28, 0xcb, 0xb3, 0xaf,
        0x75, 0x23, 0x13, 0x72, 0x0c, 0x7b, 0x34, 0x54,
        0x34, 0xf7, 0x2d, 0x65, 0x31, 0x43, 0x28, 0xbb,
        0xb0, 0x30, 0xd0, 0xf0, 0xf6, 0xd5, 0xe4, 0x7b,
        0x28, 0xea, 0x91, 0x00, 0x8f, 0xb1, 0x1b, 0x05,
        0x01, 0x77, 0x05, 0xa8, 0xbe, 0x3b, 0x2a, 0xdb,
        0x83, 0xc6, 0x0a, 0x54, 0xf9, 0xd1, 0xd1, 0xb2,
        0xf4, 0x76, 0xf9, 0xe3, 0x93, 0xeb, 0x56, 0x95,
        0x20, 0x3d, 0x2b, 0xa6, 0xad, 0x81, 0x5e, 0x6a,
        0x11, 0x1e, 0xa2, 0x93, 0xdc, 0xc2, 0x10, 0x33,
        0xf9, 0x45, 0x3d, 0x49, 0xc8, 0xe5, 0xa6, 0x38,
        0x7f, 0x58, 0x8b, 0x1e, 0xa4, 0xf7, 0x06, 0x21,
        0x7c, 0x15, 0x1e, 0x05, 0xf5, 0x5a, 0x6e, 0xb7,
        0x99, 0x7b, 0xe0, 0x9d, 0x56, 0xa3, 0x26, 0xa3,
        0x2f, 0x9c, 0xba, 0x1f, 0xbe, 0x1c, 0x07, 0xbb,
        0x49, 0xfa, 0x04, 0xce, 0xcf, 0x9d, 0xf1, 0xa1,
        0xb8, 0x15, 0x48, 0x3c, 0x75, 0xd7, 0xa2, 0x7c,
        0xc8, 0x8a, 0xd1, 0xb1, 0x23, 0x8e, 0x5e, 0xa9,
        0x86, 0xb5, 0x3e, 0x08, 0x70, 0x45, 0x72, 0x3c,
        0xe1, 0x61, 0x87, 0xed, 0xa2, 0x2e, 0x33, 0xb2,
        0xc7, 0x07, 0x09, 0xe5, 0x32, 0x51, 0x02, 0x5a,
        0xbd, 0xe8, 0x93, 0x96, 0x45, 0xfc, 0x8c, 0x06,
        0x93, 0xe9, 0x77, 0x63, 0x92, 0x8f, 0x00, 0xb2,
        0xe3, 0xc7, 0x5a, 0xf3, 0x94, 0x2d, 0x8d, 0xda,
        0xee, 0x81, 0xb5, 0x9a, 0x6f, 0x1f, 0x67, 0xef,
        0xda, 0x0e, 0xf8, 0x1d, 0x11, 0x87, 0x3b, 0x59,
        0x13, 0x7f, 0x67, 0x80, 0x0b, 0x35, 0xe8, 0x1b,
        0x01, 0x56, 0x3d, 0x18, 0x7c, 0x4a, 0x15, 0x75,
        0xa1, 0xac, 0xb9, 0x2d, 0x08, 0x7b, 0x51, 0x7a,
        0x88, 0x33, 0x38, 0x3f, 0x05, 0xd3, 0x57, 0xef,
        0x46, 0x78, 0xde, 0x0c, 0x57, 0xff, 0x9f, 0x1b,
        0x2d, 0xa6, 0x1d, 0xfd, 0xe5, 0xd8, 0x83, 0x18,
        0xbc, 0xdd, 0xe4, 0xd9, 0x06, 0x1c, 0xc7, 0x5c,
        0x2d, 0xe3, 0xcd, 0x47, 0x40, 0xdd, 0x77, 0x39,
        0xca, 0x3e, 0xf6, 0x6f, 0x19, 0x30, 0x02, 0x6f,
        0x47, 0xd9, 0xeb, 0xaa, 0x71, 0x3b, 0x07, 0x17,
        0x6f, 0x76, 0xf9, 0x53, 0xe1, 0xc2, 0xe7, 0xf8,
        0xf2, 0x71, 0xa6, 0xca, 0x37, 0x5d, 0xbf, 0xb8,
        0x3d, 0x71, 0x9b, 0x16, 0x35, 0xa7, 0xd8, 0xa1,
        0x38, 0x91, 0x95, 0x79, 0x44, 0xb1, 0xc2, 0x9b,
        0xb1, 0x01, 0x91, 0x3e, 0x16, 0x6e, 0x11, 0xbd,
        0x5f, 0x34, 0x18, 0x6f, 0xa6, 0xc0, 0xa5, 0x55,
        0xc9, 0x02, 0x6b, 0x25, 0x6a, 0x68, 0x60, 0xf4,
        0x86, 0x6b, 0xd6, 0xd0, 0xb5, 0xbf, 0x90, 0x62,
        0x70, 0x86, 0xc6, 0x14, 0x91, 0x33, 0xf8, 0x28,
        0x2c, 0xe6, 0xc9, 0xb3, 0x62, 0x24, 0x42, 0x44,
        0x3d, 0x5e, 0xca, 0x95, 0x9d, 0x6c, 0x14, 0xca,
        0x83, 0x89, 0xd1, 0x2c, 0x40, 0x68, 0xb5, 0x03,
        0xe4, 0xe3, 0xc3, 0x9b, 0x63, 0x5b, 0xea, 0x24,
        0x5d, 0x9d, 0x05, 0xa2, 0x55, 0x8f, 0x24, 0x9c,
        0x96, 0x61, 0xc0, 0x42, 0x7d, 0x2e, 0x48, 0x9c,
        0xa5, 0xb5, 0xdd, 0xe2, 0x20, 0xa9, 0x03, 0x33,
        0xf4, 0x86, 0x2a, 0xec, 0x79, 0x32, 0x23, 0xc7,
        0x81, 0x99, 0x7d, 0xa9, 0x82, 0x66, 0xc1, 0x2c,
        0x50, 0xea, 0x28, 0xb2, 0xc4, 0x38, 0xe7, 0xa3,
        0x79, 0xeb, 0x10, 0x6e, 0xca, 0x0c, 0x7f, 0xd6,
        0x00, 0x6e, 0x9b, 0xf6, 0x12, 0xf3, 0xea, 0x0a,
        0x45, 0x4b, 0xa3, 0xbd, 0xb7, 0x6e, 0x80, 0x27,
        0x99, 0x2e, 0x60, 0xde, 0x01, 0xe9, 0x09, 0x4f,
        0xdd, 0xeb, 0x33, 0x49, 0x88, 0x39, 0x14, 0xfb,
        0x17, 0xa9, 0x62, 0x1a, 0xb9, 0x29, 0xd9, 0x70,
        0xd1, 0x01, 0xe4, 0x5f, 0x82, 0x78, 0xc1, 0x4b,
        0x03, 0x2b, 0xca, 0xb0, 0x2b, 0xd1, 0x56, 0x92,
        0xd2, 0x1b, 0x6c, 0x5c, 0x20, 0x4a, 0xbb, 0xf0,
        0x77, 0xd4, 0x65, 0x55, 0x3b, 0xd6, 0xed, 0xa6,
        0x45, 0xe6, 0xc3, 0x06, 0x5d, 0x33, 0xb1, 0x0d,
        0x51, 0x8a, 0x61, 0xe1, 0x5e, 0xd0, 0xf0, 0x92,
        0xc3, 0x22, 0x26, 0x28, 0x1a, 0x29, 0xc8, 0xa0,
        0xf5, 0x0c, 0xde, 0x0a, 0x8c, 0x66, 0x23, 0x6e,
        0x29, 0xc2, 0xf3, 0x10, 0xa3, 0x75, 0xce, 0xbd,
        0xa1, 0xdc, 0x6b, 0xb9, 0xa1, 0xa0, 0x1d, 0xae,
        0x6c, 0x7a, 0xba, 0x8e, 0xbe, 0xdc, 0x63, 0x71,
        0xa7, 0xd5, 0x2a, 0xac, 0xb9, 0x55, 0xf8, 0x3b,
        0xd6, 0xe4, 0xf8, 0x4d, 0x29, 0x49, 0xdc, 0xc1,
        0x98, 0xfb, 0x77, 0xc7, 0xe5, 0xcd, 0xf6, 0x04,
        0x0b, 0x0f, 0x84, 0xfa, 0xf8, 0x28, 0x08, 0xbf,
        0x98, 0x55, 0x77, 0xf0, 0xa2, 0xac, 0xf2, 0xec,
        0x7e, 0xd7, 0xc0, 0xb0, 0xae, 0x8a, 0x27, 0x0e,
        0x95, 0x17, 0x43, 0xff, 0x23, 0xe0, 0xb2, 0xdd,
        0x12, 0xe9, 0xc3, 0xc8, 0x28, 0xfb, 0x55, 0x98,
        0xa2, 0x24, 0x61, 0xaf, 0x94, 0xd5, 0x68, 0xf2,
        0x92, 0x40, 0xba, 0x28, 0x20, 0xc4, 0x59, 0x1f,
        0x71, 0xc0, 0x88, 0xf9, 0x6e, 0x09, 0x5d, 0xd9,
        0x8b, 0xea, 0xe4, 0x56, 0x57, 0x9e, 0xbb, 0xba,
        0x36, 0xf6, 0xd9, 0xca, 0x26, 0x13, 0xd1, 0xc2,
        0x6e, 0xee, 0x4d, 0x8c, 0x73, 0x21, 0x7a, 0xc5,
        0x96, 0x2b, 0x5f, 0x31, 0x47, 0xb4, 0x92, 0xe8,
        0x83, 0x15, 0x97, 0xfd, 0x89, 0xb6, 0x4a, 0xa7,
        0xfd, 0xe8, 0x2e, 0x19, 0x74, 0xd2, 0xf6, 0x77,
        0x95, 0x04, 0xdc, 0x21, 0x43, 0x5e, 0xb3, 0x10,
        0x93, 0x50, 0x75, 0x6b, 0x9f, 0xda, 0xbe, 0x1c,
        0x6f, 0x36, 0x80, 0x81, 0xbd, 0x40, 0xb2, 0x7e,
        0xbc, 0xb9, 0x81, 0x9a, 0x75, 0xd7, 0xdf, 0x8b,
        0xb0, 0x7b, 0xb0, 0x5d, 0xb1, 0xba, 0xb7, 0x05,
        0xa4, 0xb7, 0xe3, 0x71, 0x25, 0x18, 0x63, 0x39,
        0x46, 0x4a, 0xd8, 0xfa, 0xaa, 0x4f, 0x05, 0x2c,
        0xc1, 0x27, 0x29, 0x19, 0xfd, 0xe3, 0xe0, 0x25,
        0xbb, 0x64, 0xaa, 0x8e, 0x0e, 0xb1, 0xfc, 0xbf,
        0xcc, 0x25, 0xac, 0xb5, 0xf7, 0x18, 0xce, 0x4f,
        0x7c, 0x21, 0x82, 0xfb, 0x39, 0x3a, 0x18, 0x14,
        0xb0, 0xe9, 0x42, 0x49, 0x0e, 0x52, 0xd3, 0xbc,
        0xa8, 0x17, 0xb2, 0xb2, 0x6e, 0x90, 0xd4, 0xc9,
        0xb0, 0xcc, 0x38, 0x60, 0x8a, 0x6c, 0xef, 0x5e,
        0xb1, 0x53, 0xaf, 0x08, 0x58, 0xac, 0xc8, 0x67,
        0xc9, 0x92, 0x2a, 0xed, 0x43, 0xbb, 0x67, 0xd7,
        0xb3, 0x3a, 0xcc, 0x51, 0x93, 0x13, 0xd2, 0x8d,
        0x41, 0xa5, 0xc6, 0xfe, 0x6c, 0xf3, 0x59, 0x5d,
        0xd5, 0xee, 0x63, 0xf0, 0xa4, 0xc4, 0x06, 0x5a,
        0x08, 0x35, 0x90, 0xb2, 0x75, 0x78, 0x8b, 0xee,
        0x7a, 0xd8, 0x75, 0xa7, 0xf8, 0x8d, 0xd7, 0x37,
        0x20, 0x70, 0x8c, 0x6c, 0x6c, 0x0e, 0xcf, 0x1f,
        0x43, 0xbb, 0xaa, 0xda, 0xe6, 0xf2, 0x08, 0x55,
        0x7f, 0xdc, 0x07, 0xbd, 0x4e, 0xd9, 0x1f, 0x88,
        0xce, 0x4c, 0x0d, 0xe8, 0x42, 0x76, 0x1c, 0x70,
        0xc1, 0x86, 0xbf, 0xda, 0xfa, 0xfc, 0x44, 0x48,
        0x34, 0xbd, 0x34, 0x18, 0xbe, 0x42, 0x53, 0xa7,
        0x1e, 0xaf, 0x41, 0xd7, 0x18, 0x75, 0x3a, 0xd0,
        0x77, 0x54, 0xca, 0x3e, 0xff, 0xd5, 0x96, 0x0b,
        0x03, 0x36, 0x98, 0x17, 0x95, 0x72, 0x14, 0x26,
        0x80, 0x35, 0x99, 0xed, 0x5b, 0x2b, 0x75, 0x16,
        0x92, 0x0e, 0xfc, 0xbe, 0x32, 0xad, 0xa4, 0xbc,
        0xf6, 0xc7, 0x3b, 0xd2, 0x9e, 0x3f, 0xa1, 0x52,
        0xd9, 0xad, 0xec, 0xa3, 0x60, 0x20, 0xfd, 0xee,
        0xee, 0x1b, 0x73, 0x95, 0x21, 0xd3, 0xea, 0x8c,
        0x0d, 0xa4, 0x97, 0x00, 0x3d, 0xf1, 0x51, 0x38,
        0x97, 0xb0, 0xf5, 0x47, 0x94, 0xa8, 0x73, 0x67,
        0x0b, 0x8d, 0x93, 0xbc, 0xca, 0x2a, 0xe4, 0x7e,
        0x64, 0x42, 0x4b, 0x74, 0x23, 0xe1, 0xf0, 0x78,
        0xd9, 0x55, 0x4b, 0xb5, 0x23, 0x2c, 0xc6, 0xde,
        0x8a, 0xae, 0x9b, 0x83, 0xfa, 0x5b, 0x95, 0x10,
        0xbe, 0xb3, 0x9c, 0xcf, 0x4b, 0x4e, 0x1d, 0x9c,
        0x0f, 0x19, 0xd5, 0xe1, 0x7f, 0x58, 0xe5, 0xb8,
        0x70, 0x5d, 0x9a, 0x68, 0x37, 0xa7, 0xd9, 0xbf,
        0x99, 0xcd, 0x13, 0x38, 0x7a, 0xf2, 0x56, 0xa8,
        0x49, 0x16, 0x71, 0xf1, 0xf2, 0xf2, 0x2a, 0xf2,
        0x53, 0xbc, 0xff, 0x54, 0xb6, 0x73, 0x19, 0x9b,
        0xdb, 0x7d, 0x05, 0xd8, 0x10, 0x64, 0xef, 0x05,
        0xf8, 0x0f, 0x01, 0x53, 0xd0, 0xbe, 0x79, 0x19,
        0x68, 0x4b, 0x23, 0xda, 0x8d, 0x42, 0xff, 0x3e,
        0xff, 0xdb, 0x7c, 0xa0, 0x98, 0x50, 0x33, 0xf3,
        0x89, 0x18, 0x1f, 0x47, 0x65, 0x91, 0x38, 0x00,
        0x3d, 0x71, 0x2b, 0x5e, 0xc0, 0xa6, 0x14, 0xd3,
        0x1c, 0xc7, 0x48, 0x7f, 0x52, 0xde, 0x86, 0x64,
        0x91, 0x6a, 0xf7, 0x9c, 0x98, 0x45, 0x6b, 0x2c,
        0x94, 0xa8, 0x03, 0x80, 0x83, 0xdb, 0x55, 0x39,
        0x1e, 0x34, 0x75, 0x86, 0x22, 0x50, 0x27, 0x4a,
        0x1d, 0xe2, 0x58, 0x4f, 0xec, 0x97, 0x5f, 0xb0,
        0x95, 0x36, 0x79, 0x2c, 0xfb, 0xfc, 0xf6, 0x19,
        0x28, 0x56, 0xcc, 0x76, 0xeb, 0x5b, 0x13, 0xdc,
        0x47, 0x09, 0xe2, 0xf7, 0x30, 0x1d, 0xdf, 0xf2,
        0x6e, 0xc1, 0xb2, 0x3d, 0xe2, 0xd1, 0x88, 0xc9,
        0x99, 0x16, 0x6c, 0x74, 0xe1, 0xe1, 0x4b, 0xbc,
        0x15, 0xf4, 0x57, 0xcf, 0x4e, 0x47, 0x1a, 0xe1,
        0x3d, 0xcb, 0xdd, 0x9c, 0x50, 0xf4, 0xd6, 0x46,
        0xfc, 0x62, 0x78, 0xe8, 0xfe, 0x7e, 0xb6, 0xcb,
        0x5c, 0x94, 0x10, 0x0f, 0xa8, 0x70, 0x18, 0x73,
        0x80, 0xb7, 0x77, 0xed, 0x19, 0xd7, 0x86, 0x8f,
        0xd8, 0xca, 0x7c, 0xeb, 0x7f, 0xa7, 0xd5, 0xcc,
        0x86, 0x1c, 0x5b, 0xda, 0xc9, 0x8e, 0x74, 0x95,
        0xeb, 0x0a, 0x2c, 0xee, 0xc1, 0x92, 0x4a, 0xe9,
        0x79, 0xf4, 0x4c, 0x53, 0x90, 0xeb, 0xed, 0xdd,
        0xc6, 0x5d, 0x6e, 0xc1, 0x12, 0x87, 0xd9, 0x78,
        0xb8, 0xdf, 0x06, 0x42, 0x19, 0xbc, 0x56, 0x79,
        0xf7, 0xd7, 0xb2, 0x64, 0xa7, 0x6f, 0xf2, 0x72,
        0xb2, 0xac, 0x9f, 0x2f, 0x7c, 0xfc, 0x9f, 0xdc,
        0xfb, 0x6a, 0x51, 0x42, 0x82, 0x40, 0x02, 0x7a,
        0xfd, 0x9d, 0x52, 0xa7, 0x9b, 0x64, 0x7c, 0x90,
        0xc2, 0x70, 0x9e, 0x06, 0x0e, 0xd7, 0x0f, 0x87,
        0x29, 0x9d, 0xd7, 0x98, 0xd6, 0x8f, 0x4f, 0xad,
        0xd3, 0xda, 0x6c, 0x51, 0xd8, 0x39, 0xf8, 0x51,
        0xf9, 0x8f, 0x67, 0x84, 0x0b, 0x96, 0x4e, 0xbe,
        0x73, 0xf8, 0xce, 0xc4, 0x15, 0x72, 0x53, 0x8e,
        0xc6, 0xbc, 0x13, 0x10, 0x34, 0xca, 0x28, 0x94,
        0xeb, 0x73, 0x6b, 0x3b, 0xda, 0x93, 0xd9, 0xf5,
        0xf6, 0xfa, 0x6f, 0x6c, 0x0f, 0x03, 0xce, 0x43,
        0x36, 0x2b, 0x84, 0x14, 0x94, 0x03, 0x55, 0xfb,
        0x54, 0xd3, 0xdf, 0xdd, 0x03, 0x63, 0x3a, 0xe1,
        0x08, 0xf3, 0xde, 0x3e, 0xbc, 0x85, 0xa3, 0xff,
        0x51, 0xef, 0xee, 0xa3, 0xbc, 0x2c, 0xf2, 0x7e,
        0x16, 0x58, 0xf1, 0x78, 0x9e, 0xe6, 0x12, 0xc8,
        0x3d, 0x0f, 0x5f, 0xd5, 0x6f, 0x7c, 0xd0, 0x71,
        0x93, 0x0e, 0x29, 0x46, 0xbe, 0xee, 0xca, 0xa0,
        0x4d, 0xcc, 0xea, 0x9f, 0x97, 0x78, 0x60, 0x01,
        0x47, 0x5e, 0x02, 0x94, 0xbc, 0x28, 0x52, 0xf6,
        0x2e, 0xb5, 0xd3, 0x9b, 0xb9, 0xfb, 0xee, 0xf7,
        0x59, 0x16, 0xef, 0xe4, 0x4a, 0x66, 0x2e, 0xca,
        0xe3, 0x7e, 0xde, 0x27, 0xe9, 0xd6, 0xea, 0xdf,
        0xde, 0xb8, 0xf8, 0xb2, 0xb2, 0xdb, 0xcc, 0xbf,
        0x96, 0xfa, 0x6d, 0xba, 0xf7, 0x32, 0x1f, 0xb0,
        0xe7, 0x01, 0xf4, 0xd4, 0x29, 0xc2, 0xf4, 0xdc,
        0xd1, 0x53, 0xa2, 0x74, 0x25, 0x74, 0x12, 0x6e,
        0x5e, 0xac, 0xcc, 0x77, 0x68, 0x6a, 0xcf, 0x6e,
        0x3e, 0xe4, 0x8f, 0x42, 0x37, 0x66, 0xe0, 0xfc,
        0x46, 0x68, 0x10, 0xa9, 0x05, 0xff, 0x54, 0x53,
        0xec, 0x99, 0x89, 0x7b, 0x56, 0xbc, 0x55, 0xdd,
        0x49, 0xb9, 0x91, 0x14, 0x2f, 0x65, 0x04, 0x3f,
        0x2d, 0x74, 0x4e, 0xeb, 0x93, 0x5b, 0xa7, 0xf4,
        0xef, 0x23, 0xcf, 0x80, 0xcc, 0x5a, 0x8a, 0x33,
        0x5d, 0x36, 0x19, 0xd7, 0x81, 0xe7, 0x45, 0x48,
        0x26, 0xdf, 0x72, 0x0e, 0xec, 0x82, 0xe0, 0x60,
        0x34, 0xc4, 0x46, 0x99, 0xb5, 0xf0, 0xc4, 0x4a,
        0x87, 0x87, 0x75, 0x2e, 0x05, 0x7f, 0xa3, 0x41,
        0x9b, 0x5b, 0xb0, 0xe2, 0x5d, 0x30, 0x98, 0x1e,
        0x41, 0xcb, 0x13, 0x61, 0x32, 0x2d, 0xba, 0x8f,
        0x69, 0x93, 0x1c, 0xf4, 0x2f, 0xad, 0x3f, 0x3b,
        0xce, 0x6d, 0xed, 0x5b, 0x8b, 0xfc, 0x3d, 0x20,
        0xa2, 0x14, 0x88, 0x61, 0xb2, 0xaf, 0xc1, 0x45,
        0x62, 0xdd, 0xd2, 0x7f, 0x12, 0x89, 0x7a, 0xbf,
        0x06, 0x85, 0x28, 0x8d, 0xcc, 0x5c, 0x49, 0x82,
        0xf8, 0x26, 0x02, 0x68, 0x46, 0xa2, 0x4b, 0xf7,
        0x7e, 0x38, 0x3c, 0x7a, 0xac, 0xab, 0x1a, 0xb6,
        0x92, 0xb2, 0x9e, 0xd8, 0xc0, 0x18, 0xa6, 0x5f,
        0x3d, 0xc2, 0xb8, 0x7f, 0xf6, 0x19, 0xa6, 0x33,
        0xc4, 0x1b, 0x4f, 0xad, 0xb1, 0xc7, 0x87, 0x25,
        0xc1, 0xf8, 0xf9, 0x22, 0xf6, 0x00, 0x97, 0x87,
        0xb1, 0x96, 0x42, 0x47, 0xdf, 0x01, 0x36, 0xb1,
        0xbc, 0x61, 0x4a, 0xb5, 0x75, 0xc5, 0x9a, 0x16,
        0xd0, 0x89, 0x91, 0x7b, 0xd4, 0xa8, 0xb6, 0xf0,
        0x4d, 0x95, 0xc5, 0x81, 0x27, 0x9a, 0x13, 0x9b,
        0xe0, 0x9f, 0xcf, 0x6e, 0x98, 0xa4, 0x70, 0xa0,
        0xbc, 0xec, 0xa1, 0x91, 0xfc, 0xe4, 0x76, 0xf9,
        0x37, 0x00, 0x21, 0xcb, 0xc0, 0x55, 0x18, 0xa7,
        0xef, 0xd3, 0x5d, 0x89, 0xd8, 0x57, 0x7c, 0x99,
        0x0a, 0x5e, 0x19, 0x96, 0x1b, 0xa1, 0x62, 0x03,
        0xc9, 0x59, 0xc9, 0x18, 0x29, 0xba, 0x74, 0x97,
        0xcf, 0xfc, 0xbb, 0x4b, 0x29, 0x45, 0x46, 0x45,
        0x4f, 0xa5, 0x38, 0x8a, 0x23, 0xa2, 0x2e, 0x80,
        0x5a, 0x5c, 0xa3, 0x5f, 0x95, 0x65, 0x98, 0x84,
        0x8b, 0xda, 0x67, 0x86, 0x15, 0xfe, 0xc2, 0x8a,
        0xfd, 0x5d, 0xa6, 0x1a, 0x00, 0x00, 0x00, 0x06,
        0xb3, 0x26, 0x49, 0x33, 0x13, 0x05, 0x3c, 0xed,
        0x38, 0x76, 0xdb, 0x9d, 0x23, 0x71, 0x48, 0x18,
        0x1b, 0x71, 0x73, 0xbc, 0x7d, 0x04, 0x2c, 0xef,
        0xb4, 0xdb, 0xe9, 0x4d, 0x2e, 0x58, 0xcd, 0x21,
        0xa7, 0x69, 0xdb, 0x46, 0x57, 0xa1, 0x03, 0x27,
        0x9b, 0xa8, 0xef, 0x3a, 0x62, 0x9c, 0xa8, 0x4e,
        0xe8, 0x36, 0x17, 0x2a, 0x9c, 0x50, 0xe5, 0x1f,
        0x45, 0x58, 0x17, 0x41, 0xcf, 0x80, 0x83, 0x15,
        0x0b, 0x49, 0x1c, 0xb4, 0xec, 0xbb, 0xab, 0xec,
        0x12, 0x8e, 0x7c, 0x81, 0xa4, 0x6e, 0x62, 0xa6,
        0x7b, 0x57, 0x64, 0x0a, 0x0a, 0x78, 0xbe, 0x1c,
        0xbf, 0x7d, 0xd9, 0xd4, 0x19, 0xa1, 0x0c, 0xd8,
        0x68, 0x6d, 0x16, 0x62, 0x1a, 0x80, 0x81, 0x6b,
        0xfd, 0xb5, 0xbd, 0xc5, 0x62, 0x11, 0xd7, 0x2c,
        0xa7, 0x0b, 0x81, 0xf1, 0x11, 0x7d, 0x12, 0x95,
        0x29, 0xa7, 0x57, 0x0c, 0xf7, 0x9c, 0xf5, 0x2a,
        0x70, 0x28, 0xa4, 0x85, 0x38, 0xec, 0xdd, 0x3b,
        0x38, 0xd3, 0xd5, 0xd6, 0x2d, 0x26, 0x24, 0x65,
        0x95, 0xc4, 0xfb, 0x73, 0xa5, 0x25, 0xa5, 0xed,
        0x2c, 0x30, 0x52, 0x4e, 0xbb, 0x1d, 0x8c, 0xc8,
        0x2e, 0x0c, 0x19, 0xbc, 0x49, 0x77, 0xc6, 0x89,
        0x8f, 0xf9, 0x5f, 0xd3, 0xd3, 0x10, 0xb0, 0xba,
        0xe7, 0x16, 0x96, 0xce, 0xf9, 0x3c, 0x6a, 0x55,
        0x24, 0x56, 0xbf, 0x96, 0xe9, 0xd0, 0x75, 0xe3,
        0x83, 0xbb, 0x75, 0x43, 0xc6, 0x75, 0x84, 0x2b,
        0xaf, 0xbf, 0xc7, 0xcd, 0xb8, 0x84, 0x83, 0xb3,
        0x27, 0x6c, 0x29, 0xd4, 0xf0, 0xa3, 0x41, 0xc2,
        0xd4, 0x06, 0xe4, 0x0d, 0x46, 0x53, 0xb7, 0xe4,
        0xd0, 0x45, 0x85, 0x1a, 0xcf, 0x6a, 0x0a, 0x0e,
        0xa9, 0xc7, 0x10, 0xb8, 0x05, 0xcc, 0xed, 0x46,
        0x35, 0xee, 0x8c, 0x10, 0x73, 0x62, 0xf0, 0xfc,
        0x8d, 0x80, 0xc1, 0x4d, 0x0a, 0xc4, 0x9c, 0x51,
        0x67, 0x03, 0xd2, 0x6d, 0x14, 0x75, 0x2f, 0x34,
        0xc1, 0xc0, 0xd2, 0xc4, 0x24, 0x75, 0x81, 0xc1,
        0x8c, 0x2c, 0xf4, 0xde, 0x48, 0xe9, 0xce, 0x94,
        0x9b, 0xe7, 0xc8, 0x88, 0xe9, 0xca, 0xeb, 0xe4,
        0xa4, 0x15, 0xe2, 0x91, 0xfd, 0x10, 0x7d, 0x21,
        0xdc, 0x1f, 0x08, 0x4b, 0x11, 0x58, 0x20, 0x82,
        0x49, 0xf2, 0x8f, 0x4f, 0x7c, 0x7e, 0x93, 0x1b,
        0xa7, 0xb3, 0xbd, 0x0d, 0x82, 0x4a, 0x45, 0x70,
        0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04,
        0x21, 0x5f, 0x83, 0xb7, 0xcc, 0xb9, 0xac, 0xbc,
        0xd0, 0x8d, 0xb9, 0x7b, 0x0d, 0x04, 0xdc, 0x2b,
        0xa1, 0xcd, 0x03, 0x58, 0x33, 0xe0, 0xe9, 0x00,
        0x59, 0x60, 0x3f, 0x26, 0xe0, 0x7a, 0xd2, 0xaa,
        0xd1, 0x52, 0x33, 0x8e, 0x7a, 0x5e, 0x59, 0x84,
        0xbc, 0xd5, 0xf7, 0xbb, 0x4e, 0xba, 0x40, 0xb7,
        0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04,
        0x0e, 0xb1, 0xed, 0x54, 0xa2, 0x46, 0x0d, 0x51,
        0x23, 0x88, 0xca, 0xd5, 0x33, 0x13, 0x8d, 0x24,
        0x05, 0x34, 0xe9, 0x7b, 0x1e, 0x82, 0xd3, 0x3b,
        0xd9, 0x27, 0xd2, 0x01, 0xdf, 0xc2, 0x4e, 0xbb,
        0x11, 0xb3, 0x64, 0x90, 0x23, 0x69, 0x6f, 0x85,
        0x15, 0x0b, 0x18, 0x9e, 0x50, 0xc0, 0x0e, 0x98,
        0x85, 0x0a, 0xc3, 0x43, 0xa7, 0x7b, 0x36, 0x38,
        0x31, 0x9c, 0x34, 0x7d, 0x73, 0x10, 0x26, 0x9d,
        0x3b, 0x77, 0x14, 0xfa, 0x40, 0x6b, 0x8c, 0x35,
        0xb0, 0x21, 0xd5, 0x4d, 0x4f, 0xda, 0xda, 0x7b,
        0x9c, 0xe5, 0xd4, 0xba, 0x5b, 0x06, 0x71, 0x9e,
        0x72, 0xaa, 0xf5, 0x8c, 0x5a, 0xae, 0x7a, 0xca,
        0x05, 0x7a, 0xa0, 0xe2, 0xe7, 0x4e, 0x7d, 0xcf,
        0xd1, 0x7a, 0x08, 0x23, 0x42, 0x9d, 0xb6, 0x29,
        0x65, 0xb7, 0xd5, 0x63, 0xc5, 0x7b, 0x4c, 0xec,
        0x94, 0x2c, 0xc8, 0x65, 0xe2, 0x9c, 0x1d, 0xad,
        0x83, 0xca, 0xc8, 0xb4, 0xd6, 0x1a, 0xac, 0xc4,
        0x57, 0xf3, 0x36, 0xe6, 0xa1, 0x0b, 0x66, 0x32,
        0x3f, 0x58, 0x87, 0xbf, 0x35, 0x23, 0xdf, 0xca,
        0xde, 0xe1, 0x58, 0x50, 0x3b, 0xfa, 0xa8, 0x9d,
        0xc6, 0xbf, 0x59, 0xda, 0xa8, 0x2a, 0xfd, 0x2b,
        0x5e, 0xbb, 0x2a, 0x9c, 0xa6, 0x57, 0x2a, 0x60,
        0x67, 0xce, 0xe7, 0xc3, 0x27, 0xe9, 0x03, 0x9b,
        0x3b, 0x6e, 0xa6, 0xa1, 0xed, 0xc7, 0xfd, 0xc3,
        0xdf, 0x92, 0x7a, 0xad, 0xe1, 0x0c, 0x1c, 0x9f,
        0x2d, 0x5f, 0xf4, 0x46, 0x45, 0x0d, 0x2a, 0x39,
        0x98, 0xd0, 0xf9, 0xf6, 0x20, 0x2b, 0x5e, 0x07,
        0xc3, 0xf9, 0x7d, 0x24, 0x58, 0xc6, 0x9d, 0x3c,
        0x81, 0x90, 0x64, 0x39, 0x78, 0xd7, 0xa7, 0xf4,
        0xd6, 0x4e, 0x97, 0xe3, 0xf1, 0xc4, 0xa0, 0x8a,
        0x7c, 0x5b, 0xc0, 0x3f, 0xd5, 0x56, 0x82, 0xc0,
        0x17, 0xe2, 0x90, 0x7e, 0xab, 0x07, 0xe5, 0xbb,
        0x2f, 0x19, 0x01, 0x43, 0x47, 0x5a, 0x60, 0x43,
        0xd5, 0xe6, 0xd5, 0x26, 0x34, 0x71, 0xf4, 0xee,
        0xcf, 0x6e, 0x25, 0x75, 0xfb, 0xc6, 0xff, 0x37,
        0xed, 0xfa, 0x24, 0x9d, 0x6c, 0xda, 0x1a, 0x09,
        0xf7, 0x97, 0xfd, 0x5a, 0x3c, 0xd5, 0x3a, 0x06,
        0x67, 0x00, 0xf4, 0x58, 0x63, 0xf0, 0x4b, 0x6c,
        0x8a, 0x58, 0xcf, 0xd3, 0x41, 0x24, 0x1e, 0x00,
        0x2d, 0x0d, 0x2c, 0x02, 0x17, 0x47, 0x2b, 0xf1,
        0x8b, 0x63, 0x6a, 0xe5, 0x47, 0xc1, 0x77, 0x13,
        0x68, 0xd9, 0xf3, 0x17, 0x83, 0x5c, 0x9b, 0x0e,
        0xf4, 0x30, 0xb3, 0xdf, 0x40, 0x34, 0xf6, 0xaf,
        0x00, 0xd0, 0xda, 0x44, 0xf4, 0xaf, 0x78, 0x00,
        0xbc, 0x7a, 0x5c, 0xf8, 0xa5, 0xab, 0xdb, 0x12,
        0xdc, 0x71, 0x8b, 0x55, 0x9b, 0x74, 0xca, 0xb9,
        0x09, 0x0e, 0x33, 0xcc, 0x58, 0xa9, 0x55, 0x30,
        0x09, 0x81, 0xc4, 0x20, 0xc4, 0xda, 0x8f, 0xfd,
        0x67, 0xdf, 0x54, 0x08, 0x90, 0xa0, 0x62, 0xfe,
        0x40, 0xdb, 0xa8, 0xb2, 0xc1, 0xc5, 0x48, 0xce,
        0xd2, 0x24, 0x73, 0x21, 0x9c, 0x53, 0x49, 0x11,
        0xd4, 0x8c, 0xca, 0xab, 0xfb, 0x71, 0xbc, 0x71,
        0x86, 0x2f, 0x4a, 0x24, 0xeb, 0xd3, 0x76, 0xd2,
        0x88, 0xfd, 0x4e, 0x6f, 0xb0, 0x6e, 0xd8, 0x70,
        0x57, 0x87, 0xc5, 0xfe, 0xdc, 0x81, 0x3c, 0xd2,
        0x69, 0x7e, 0x5b, 0x1a, 0xac, 0x1c, 0xed, 0x45,
        0x76, 0x7b, 0x14, 0xce, 0x88, 0x40, 0x9e, 0xae,
        0xbb, 0x60, 0x1a, 0x93, 0x55, 0x9a, 0xae, 0x89,
        0x3e, 0x14, 0x3d, 0x1c, 0x39, 0x5b, 0xc3, 0x26,
        0xda, 0x82, 0x1d, 0x79, 0xa9, 0xed, 0x41, 0xdc,
        0xfb, 0xe5, 0x49, 0x14, 0x7f, 0x71, 0xc0, 0x92,
        0xf4, 0xf3, 0xac, 0x52, 0x2b, 0x5c, 0xc5, 0x72,
        0x90, 0x70, 0x66, 0x50, 0x48, 0x7b, 0xae, 0x9b,
        0xb5, 0x67, 0x1e, 0xcc, 0x9c, 0xcc, 0x2c, 0xe5,
        0x1e, 0xad, 0x87, 0xac, 0x01, 0x98, 0x52, 0x68,
        0x52, 0x12, 0x22, 0xfb, 0x90, 0x57, 0xdf, 0x7e,
        0xd4, 0x18, 0x10, 0xb5, 0xef, 0x0d, 0x4f, 0x7c,
        0xc6, 0x73, 0x68, 0xc9, 0x0f, 0x57, 0x3b, 0x1a,
        0xc2, 0xce, 0x95, 0x6c, 0x36, 0x5e, 0xd3, 0x8e,
        0x89, 0x3c, 0xe7, 0xb2, 0xfa, 0xe1, 0x5d, 0x36,
        0x85, 0xa3, 0xdf, 0x2f, 0xa3, 0xd4, 0xcc, 0x09,
        0x8f, 0xa5, 0x7d, 0xd6, 0x0d, 0x2c, 0x97, 0x54,
        0xa8, 0xad, 0xe9, 0x80, 0xad, 0x0f, 0x93, 0xf6,
        0x78, 0x70, 0x75, 0xc3, 0xf6, 0x80, 0xa2, 0xba,
        0x19, 0x36, 0xa8, 0xc6, 0x1d, 0x1a, 0xf5, 0x2a,
        0xb7, 0xe2, 0x1f, 0x41, 0x6b, 0xe0, 0x9d, 0x2a,
        0x8d, 0x64, 0xc3, 0xd3, 0xd8, 0x58, 0x29, 0x68,
        0xc2, 0x83, 0x99, 0x02, 0x22, 0x9f, 0x85, 0xae,
        0xe2, 0x97, 0xe7, 0x17, 0xc0, 0x94, 0xc8, 0xdf,
        0x4a, 0x23, 0xbb, 0x5d, 0xb6, 0x58, 0xdd, 0x37,
        0x7b, 0xf0, 0xf4, 0xff, 0x3f, 0xfd, 0x8f, 0xba,
        0x5e, 0x38, 0x3a, 0x48, 0x57, 0x48, 0x02, 0xed,
        0x54, 0x5b, 0xbe, 0x7a, 0x6b, 0x47, 0x53, 0x53,
        0x33, 0x53, 0xd7, 0x37, 0x06, 0x06, 0x76, 0x40,
        0x13, 0x5a, 0x7c, 0xe5, 0x17, 0x27, 0x9c, 0xd6,
        0x83, 0x03, 0x97, 0x47, 0xd2, 0x18, 0x64, 0x7c,
        0x86, 0xe0, 0x97, 0xb0, 0xda, 0xa2, 0x87, 0x2d,
        0x54, 0xb8, 0xf3, 0xe5, 0x08, 0x59, 0x87, 0x62,
        0x95, 0x47, 0xb8, 0x30, 0xd8, 0x11, 0x81, 0x61,
        0xb6, 0x50, 0x79, 0xfe, 0x7b, 0xc5, 0x9a, 0x99,
        0xe9, 0xc3, 0xc7, 0x38, 0x0e, 0x3e, 0x70, 0xb7,
        0x13, 0x8f, 0xe5, 0xd9, 0xbe, 0x25, 0x51, 0x50,
        0x2b, 0x69, 0x8d, 0x09, 0xae, 0x19, 0x39, 0x72,
        0xf2, 0x7d, 0x40, 0xf3, 0x8d, 0xea, 0x26, 0x4a,
        0x01, 0x26, 0xe6, 0x37, 0xd7, 0x4a, 0xe4, 0xc9,
        0x2a, 0x62, 0x49, 0xfa, 0x10, 0x34, 0x36, 0xd3,
        0xeb, 0x0d, 0x40, 0x29, 0xac, 0x71, 0x2b, 0xfc,
        0x7a, 0x5e, 0xac, 0xbd, 0xd7, 0x51, 0x8d, 0x6d,
        0x4f, 0xe9, 0x03, 0xa5, 0xae, 0x65, 0x52, 0x7c,
        0xd6, 0x5b, 0xb0, 0xd4, 0xe9, 0x92, 0x5c, 0xa2,
        0x4f, 0xd7, 0x21, 0x4d, 0xc6, 0x17, 0xc1, 0x50,
        0x54, 0x4e, 0x42, 0x3f, 0x45, 0x0c, 0x99, 0xce,
        0x51, 0xac, 0x80, 0x05, 0xd3, 0x3a, 0xcd, 0x74,
        0xf1, 0xbe, 0xd3, 0xb1, 0x7b, 0x72, 0x66, 0xa4,
        0xa3, 0xbb, 0x86, 0xda, 0x7e, 0xba, 0x80, 0xb1,
        0x01, 0xe1, 0x5c, 0xb7, 0x9d, 0xe9, 0xa2, 0x07,
        0x85, 0x2c, 0xf9, 0x12, 0x49, 0xef, 0x48, 0x06,
        0x19, 0xff, 0x2a, 0xf8, 0xca, 0xbc, 0xa8, 0x31,
        0x25, 0xd1, 0xfa, 0xa9, 0x4c, 0xbb, 0x0a, 0x03,
        0xa9, 0x06, 0xf6, 0x83, 0xb3, 0xf4, 0x7a, 0x97,
        0xc8, 0x71, 0xfd, 0x51, 0x3e, 0x51, 0x0a, 0x7a,
        0x25, 0xf2, 0x83, 0xb1, 0x96, 0x07, 0x57, 0x78,
        0x49, 0x61, 0x52, 0xa9, 0x1c, 0x2b, 0xf9, 0xda,
        0x76, 0xeb, 0xe0, 0x89, 0xf4, 0x65, 0x48, 0x77,
        0xf2, 0xd5, 0x86, 0xae, 0x71, 0x49, 0xc4, 0x06,
        0xe6, 0x63, 0xea, 0xde, 0xb2, 0xb5, 0xc7, 0xe8,
        0x24, 0x29, 0xb9, 0xe8, 0xcb, 0x48, 0x34, 0xc8,
        0x34, 0x64, 0xf0, 0x79, 0x99, 0x53, 0x32, 0xe4,
        0xb3, 0xc8, 0xf5, 0xa7, 0x2b, 0xb4, 0xb8, 0xc6,
        0xf7, 0x4b, 0x0d, 0x45, 0xdc, 0x6c, 0x1f, 0x79,
        0x95, 0x2c, 0x0b, 0x74, 0x20, 0xdf, 0x52, 0x5e,
        0x37, 0xc1, 0x53, 0x77, 0xb5, 0xf0, 0x98, 0x43,
        0x19, 0xc3, 0x99, 0x39, 0x21, 0xe5, 0xcc, 0xd9,
        0x7e, 0x09, 0x75, 0x92, 0x06, 0x45, 0x30, 0xd3,
        0x3d, 0xe3, 0xaf, 0xad, 0x57, 0x33, 0xcb, 0xe7,
        0x70, 0x3c, 0x52, 0x96, 0x26, 0x3f, 0x77, 0x34,
        0x2e, 0xfb, 0xf5, 0xa0, 0x47, 0x55, 0xb0, 0xb3,
        0xc9, 0x97, 0xc4, 0x32, 0x84, 0x63, 0xe8, 0x4c,
        0xaa, 0x2d, 0xe3, 0xff, 0xdc, 0xd2, 0x97, 0xba,
        0xaa, 0xac, 0xd7, 0xae, 0x64, 0x6e, 0x44, 0xb5,
        0xc0, 0xf1, 0x60, 0x44, 0xdf, 0x38, 0xfa, 0xbd,
        0x29, 0x6a, 0x47, 0xb3, 0xa8, 0x38, 0xa9, 0x13,
        0x98, 0x2f, 0xb2, 0xe3, 0x70, 0xc0, 0x78, 0xed,
        0xb0, 0x42, 0xc8, 0x4d, 0xb3, 0x4c, 0xe3, 0x6b,
        0x46, 0xcc, 0xb7, 0x64, 0x60, 0xa6, 0x90, 0xcc,
        0x86, 0xc3, 0x02, 0x45, 0x7d, 0xd1, 0xcd, 0xe1,
        0x97, 0xec, 0x80, 0x75, 0xe8, 0x2b, 0x39, 0x3d,
        0x54, 0x20, 0x75, 0x13, 0x4e, 0x2a, 0x17, 0xee,
        0x70, 0xa5, 0xe1, 0x87, 0x07, 0x5d, 0x03, 0xae,
        0x3c, 0x85, 0x3c, 0xff, 0x60, 0x72, 0x9b, 0xa4,
        0x00, 0x00, 0x00, 0x05, 0x4d, 0xe1, 0xf6, 0x96,
        0x5b, 0xda, 0xbc, 0x67, 0x6c, 0x5a, 0x4d, 0xc7,
        0xc3, 0x5f, 0x97, 0xf8, 0x2c, 0xb0, 0xe3, 0x1c,
        0x68, 0xd0, 0x4f, 0x1d, 0xad, 0x96, 0x31, 0x4f,
        0xf0, 0x9e, 0x6b, 0x3d, 0xe9, 0x6a, 0xee, 0xe3,
        0x00, 0xd1, 0xf6, 0x8b, 0xf1, 0xbc, 0xa9, 0xfc,
        0x58, 0xe4, 0x03, 0x23, 0x36, 0xcd, 0x81, 0x9a,
        0xaf, 0x57, 0x87, 0x44, 0xe5, 0x0d, 0x13, 0x57,
        0xa0, 0xe4, 0x28, 0x67, 0x04, 0xd3, 0x41, 0xaa,
        0x0a, 0x33, 0x7b, 0x19, 0xfe, 0x4b, 0xc4, 0x3c,
        0x2e, 0x79, 0x96, 0x4d, 0x4f, 0x35, 0x10, 0x89,
        0xf2, 0xe0, 0xe4, 0x1c, 0x7c, 0x43, 0xae, 0x0d,
        0x49, 0xe7, 0xf4, 0x04, 0xb0, 0xf7, 0x5b, 0xe8,
        0x0e, 0xa3, 0xaf, 0x09, 0x8c, 0x97, 0x52, 0x42,
        0x0a, 0x8a, 0xc0, 0xea, 0x2b, 0xbb, 0x1f, 0x4e,
        0xeb, 0xa0, 0x52, 0x38, 0xae, 0xf0, 0xd8, 0xce,
        0x63, 0xf0, 0xc6, 0xe5, 0xe4, 0x04, 0x1d, 0x95,
        0x39, 0x8a, 0x6f, 0x7f, 0x3e, 0x0e, 0xe9, 0x7c,
        0xc1, 0x59, 0x18, 0x49, 0xd4, 0xed, 0x23, 0x63,
        0x38, 0xb1, 0x47, 0xab, 0xde, 0x9f, 0x51, 0xef,
        0x9f, 0xd4, 0xe1, 0xc1,
    }

    // We need to extract the relevant parts from the HSS tests
    // Ignore first 4 bytes (HSS header)
    // Ignore the top-level LMS signature
    lms_signature_bytes := hss_signature_bytes[2568:]
    sig, err := NewSignatureFromBytes(lms_signature_bytes)
    if err != nil {
        panic(err)
    }

    pk, err := NewPublicKeyFromBytes(lms_public_key_bytes)
    if err != nil {
        panic(err)
    }

    result := pk.VerifyWithSignature(message_bytes, sig)
    assertBool(result, "VerifyWithSignature")
}

func Test_SignatureFromBytes(t *testing.T) {
    assertNotErrorNil := test.AssertNotErrorNilT(t)

    for i := 0; i < 1000; i++ {
        bytes := make([]byte, i)
        _, err := NewSignatureFromBytes(bytes)
        assertNotErrorNil(err, "NewSignatureFromBytes")
    }
}

func test_SignVerify(t *testing.T, tc ILmsParam, otstc ILmotsParam) {
    assertBool := test.AssertBoolT(t)
    assertError := test.AssertErrorT(t)

    seed, err := hex.DecodeString("558b8966c48ae9cb898b423c83443aae014a72f1b1ab5cc85cf1d892903b5439")
    if err != nil {
        panic(err)
    }

    id, err := hex.DecodeString("d08fabd4a2091ff0a8cb4ed834e74534")
    if err != nil {
        panic(err)
    }

    lms_priv, err := GenerateKeyFromSeed(tc, otstc, ID(id), seed)
    assertError(err, "GenerateKeyFromSeed")

    lms_pub := lms_priv.PublicKey

    lms_sig, err := lms_priv.Sign(rand.Reader, []byte("example"), nil)
    assertError(err, "priv.SignToSignature()")

    result := lms_pub.Verify([]byte("example"), lms_sig)
    assertBool(result, "SignVerify")
}

func Test_SignVerify(t *testing.T) {
    t.Run("SignVerify_H5_W1", func(t *testing.T) {
        test_SignVerify(t, LMS_SHA256_M32_H5_Param, LMOTS_SHA256_N32_W1_Param)
    })
    t.Run("SignVerify_H5_W2", func(t *testing.T) {
        test_SignVerify(t, LMS_SHA256_M32_H5_Param, LMOTS_SHA256_N32_W2_Param)
    })
}

func Test_ParamName(t *testing.T) {
    assertEqual := test.AssertEqualT(t)

    assertEqual(LMS_SHA256_M32_H5_Param.String(), "LMS_SHA256_M32_H5", "")
    assertEqual(LMS_SHA256_M32_H10_Param.String(), "LMS_SHA256_M32_H10", "")
    assertEqual(LMS_SHA256_M32_H15_Param.String(), "LMS_SHA256_M32_H15", "")
    assertEqual(LMS_SHA256_M32_H20_Param.String(), "LMS_SHA256_M32_H20", "")
    assertEqual(LMS_SHA256_M32_H25_Param.String(), "LMS_SHA256_M32_H25", "")

    assertEqual(LMS_SM3_M32_H5_Param.String(), "LMS_SM3_M32_H5", "")
    assertEqual(LMS_SM3_M32_H10_Param.String(), "LMS_SM3_M32_H10", "")
    assertEqual(LMS_SM3_M32_H15_Param.String(), "LMS_SM3_M32_H15", "")
    assertEqual(LMS_SM3_M32_H20_Param.String(), "LMS_SM3_M32_H20", "")
    assertEqual(LMS_SM3_M32_H25_Param.String(), "LMS_SM3_M32_H25", "")
}

func Test_Equal(t *testing.T) {
    assertBool := test.AssertBoolT(t)
    assertNotBool := test.AssertNotBoolT(t)
    assertError := test.AssertErrorT(t)

    t.Run("good", func(t *testing.T) {
        tc := LMS_SHA256_M32_H10_Param
        otstc := LMOTS_SHA256_N32_W4_Param

        lms_priv, err := GenerateKey(rand.Reader, tc, otstc)
        assertError(err, "GenerateKey")

        lms_pub := lms_priv.PublicKey

        lms_priv2 := lms_priv
        lms_pub2 := lms_pub

        assertBool(lms_priv2.Equal(lms_priv), "PrivateKey")
        assertBool(lms_pub2.Equal(&lms_pub), "PublicKey")

        // =========

        privBytes := lms_priv.ToBytes()
        pubBytes := lms_pub.ToBytes()

        lms_priv3, _ := NewPrivateKeyFromBytes(privBytes)
        lms_pub3, _ := NewPublicKeyFromBytes(pubBytes)

        assertBool(lms_priv3.Equal(lms_priv), "PrivateKey Bytes")
        assertBool(lms_pub3.Equal(&lms_pub), "PublicKey Bytes")
    })

    t.Run("bad", func(t *testing.T) {
        tc := LMS_SHA256_M32_H10_Param
        otstc := LMOTS_SHA256_N32_W4_Param

        lms_priv, err := GenerateKey(rand.Reader, tc, otstc)
        assertError(err, "GenerateKey")

        lms_pub := lms_priv.PublicKey

        // ===========

        tc2 := LMS_SHA256_M32_H10_Param
        otstc2 := LMOTS_SHA256_N32_W4_Param

        lms_priv2, err := GenerateKey(rand.Reader, tc2, otstc2)
        assertError(err, "GenerateKey2")

        lms_pub2 := lms_priv2.PublicKey

        assertNotBool(lms_priv2.Equal(lms_priv), "PrivateKey")
        assertNotBool(lms_pub2.Equal(&lms_pub), "PublicKey")
    })
}
