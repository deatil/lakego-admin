package edwards448

import (
    "math/big"
    "encoding/hex"
    "testing"
    "testing/quick"
)

func (s *Scalar) String() string {
    return hex.EncodeToString(s.s[:])
}

func TestSetUniformBytes(t *testing.T) {
    t.Run("l-1", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0xf2, 0x44, 0x58, 0xab, 0x92, 0xc2, 0x78, 0x23,
            0x55, 0x8f, 0xc5, 0x8d, 0x72, 0xc2, 0x6c, 0x21,
            0x90, 0x36, 0xd6, 0xae, 0x49, 0xdb, 0x4e, 0xc4,
            0xe9, 0x23, 0xca, 0x7c, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0xf2, 0x44, 0x58, 0xab, 0x92, 0xc2, 0x78, 0x23,
            0x55, 0x8f, 0xc5, 0x8d, 0x72, 0xc2, 0x6c, 0x21,
            0x90, 0x36, 0xd6, 0xae, 0x49, 0xdb, 0x4e, 0xc4,
            0xe9, 0x23, 0xca, 0x7c, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("l", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0xf3, 0x44, 0x58, 0xab, 0x92, 0xc2, 0x78, 0x23,
            0x55, 0x8f, 0xc5, 0x8d, 0x72, 0xc2, 0x6c, 0x21,
            0x90, 0x36, 0xd6, 0xae, 0x49, 0xdb, 0x4e, 0xc4,
            0xe9, 0x23, 0xca, 0x7c, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^446", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x0d, 0xbb, 0xa7, 0x54, 0x6d, 0x3d, 0x87, 0xdc,
            0xaa, 0x70, 0x3a, 0x72, 0x8d, 0x3d, 0x93, 0xde,
            0x6f, 0xc9, 0x29, 0x51, 0xb6, 0x24, 0xb1, 0x3b,
            0x16, 0xdc, 0x35, 0x83, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^456", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x00, 0x34, 0xec, 0x9e, 0x52, 0xb5, 0xf5, 0x1c,
            0x72, 0xab, 0xc2, 0xe9, 0xc8, 0x35, 0xf6, 0x4c,
            0x7a, 0xbf, 0x25, 0xa7, 0x44, 0xd9, 0x92, 0xc4,
            0xee, 0x58, 0x70, 0xd7, 0x0c, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^480", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x00, 0x00, 0x00, 0x00, 0x34, 0xec, 0x9e, 0x52,
            0xb5, 0xf5, 0x1c, 0x72, 0xab, 0xc2, 0xe9, 0xc8,
            0x35, 0xf6, 0x4c, 0x7a, 0xbf, 0x25, 0xa7, 0x44,
            0xd9, 0x92, 0xc4, 0xee, 0x58, 0x70, 0xd7, 0x0c,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^504", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34,
            0xec, 0x9e, 0x52, 0xb5, 0xf5, 0x1c, 0x72, 0xab,
            0xc2, 0xe9, 0xc8, 0x35, 0xf6, 0x4c, 0x7a, 0xbf,
            0x25, 0xa7, 0x44, 0xd9, 0x92, 0xc4, 0xee, 0x58,
            0x70, 0xd7, 0x0c, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^528", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x34, 0xec, 0x9e, 0x52, 0xb5, 0xf5,
            0x1c, 0x72, 0xab, 0xc2, 0xe9, 0xc8, 0x35, 0xf6,
            0x4c, 0x7a, 0xbf, 0x25, 0xa7, 0x44, 0xd9, 0x92,
            0xc4, 0xee, 0x58, 0x70, 0xd7, 0x0c, 0x02, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^552", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0xec, 0x9e,
            0x52, 0xb5, 0xf5, 0x1c, 0x72, 0xab, 0xc2, 0xe9,
            0xc8, 0x35, 0xf6, 0x4c, 0x7a, 0xbf, 0x25, 0xa7,
            0x44, 0xd9, 0x92, 0xc4, 0xee, 0x58, 0x70, 0xd7,
            0x0c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^576", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x34, 0xec, 0x9e, 0x52, 0xb5, 0xf5, 0x1c, 0x72,
            0xab, 0xc2, 0xe9, 0xc8, 0x35, 0xf6, 0x4c, 0x7a,
            0xbf, 0x25, 0xa7, 0x44, 0xd9, 0x92, 0xc4, 0xee,
            0x58, 0x70, 0xd7, 0x0c, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^600", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x34, 0xec, 0x9e, 0x52, 0xb5,
            0xf5, 0x1c, 0x72, 0xab, 0xc2, 0xe9, 0xc8, 0x35,
            0xf6, 0x4c, 0x7a, 0xbf, 0x25, 0xa7, 0x44, 0xd9,
            0x92, 0xc4, 0xee, 0x58, 0x70, 0xd7, 0x0c, 0x02,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^624", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0xec,
            0x9e, 0x52, 0xb5, 0xf5, 0x1c, 0x72, 0xab, 0xc2,
            0xe9, 0xc8, 0x35, 0xf6, 0x4c, 0x7a, 0xbf, 0x25,
            0xa7, 0x44, 0xd9, 0x92, 0xc4, 0xee, 0x58, 0x70,
            0xd7, 0x0c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^648", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x34, 0xec, 0x9e, 0x52, 0xb5, 0xf5, 0x1c,
            0x72, 0xab, 0xc2, 0xe9, 0xc8, 0x35, 0xf6, 0x4c,
            0x7a, 0xbf, 0x25, 0xa7, 0x44, 0xd9, 0x92, 0xc4,
            0xee, 0x58, 0x70, 0xd7, 0x0c, 0x02, 0x00, 0x00,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^672", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x68, 0xd8, 0x3d, 0xa5, 0x6a, 0xeb, 0x39, 0xe4,
            0x56, 0x85, 0xd3, 0x91, 0x6b, 0xec, 0x99, 0xf4,
            0x7e, 0x4b, 0x4e, 0x89, 0xb2, 0x25, 0x89, 0xdd,
            0xb1, 0xe0, 0xae, 0x19, 0x38, 0xec, 0x9e, 0x52,
            0xb5, 0xf5, 0x1c, 0x72, 0xab, 0xc2, 0xe9, 0xc8,
            0x35, 0xf6, 0x4c, 0x7a, 0xbf, 0x25, 0xa7, 0x44,
            0xd9, 0x92, 0xc4, 0xee, 0x58, 0x70, 0xd7, 0x0c,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^696", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0xcd, 0xbd, 0xfe, 0x6c, 0x70, 0x22, 0xb3, 0x0a,
            0xca, 0x2b, 0xeb, 0x21, 0x4c, 0x5f, 0x1d, 0xf9,
            0x73, 0x72, 0xec, 0xfe, 0x8d, 0x62, 0xbe, 0x5d,
            0xe2, 0x6d, 0xda, 0x06, 0xa9, 0x02, 0x34, 0x38,
            0xec, 0x9e, 0x52, 0xb5, 0xf5, 0x1c, 0x72, 0xab,
            0xc2, 0xe9, 0xc8, 0x35, 0xf6, 0x4c, 0x7a, 0xbf,
            0x25, 0xa7, 0x44, 0xd9, 0x92, 0xc4, 0xee, 0x18,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^720", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0xea, 0xa5, 0x74, 0x9c, 0x21, 0xea, 0x15, 0x7d,
            0x89, 0xb6, 0x86, 0x14, 0x28, 0xbe, 0x25, 0x4e,
            0xc3, 0x11, 0x51, 0x95, 0xb6, 0x11, 0xc6, 0x58,
            0x0e, 0x8b, 0x84, 0x90, 0x23, 0xf8, 0x39, 0xa9,
            0x02, 0x34, 0x38, 0xec, 0x9e, 0x52, 0xb5, 0xf5,
            0x1c, 0x72, 0xab, 0xc2, 0xe9, 0xc8, 0x35, 0xf6,
            0x4c, 0x7a, 0xbf, 0x25, 0xa7, 0x44, 0xd9, 0x12,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^744", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0xea, 0x47, 0x66, 0xd7, 0xdf, 0xb5, 0x62, 0xfd,
            0x8d, 0x06, 0x1b, 0xa2, 0xd8, 0x1f, 0x28, 0xee,
            0x8e, 0xa7, 0x7d, 0xf8, 0x26, 0x9b, 0xef, 0x8d,
            0x14, 0x82, 0x7a, 0x02, 0x20, 0x29, 0xb7, 0x23,
            0xf8, 0x39, 0xa9, 0x02, 0x34, 0x38, 0xec, 0x9e,
            0x52, 0xb5, 0xf5, 0x1c, 0x72, 0xab, 0xc2, 0xe9,
            0xc8, 0x35, 0xf6, 0x4c, 0x7a, 0xbf, 0x25, 0x27,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^768", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0xd9, 0x79, 0x49, 0xd7, 0x24, 0xc1, 0x1c, 0x7e,
            0x32, 0x3b, 0xe1, 0x57, 0x5b, 0x6c, 0x68, 0x98,
            0xd2, 0x69, 0x6d, 0x01, 0xdb, 0x0e, 0xa6, 0x4f,
            0x80, 0xd8, 0x49, 0x6d, 0xb7, 0xbc, 0x52, 0x20,
            0x29, 0xb7, 0x23, 0xf8, 0x39, 0xa9, 0x02, 0x34,
            0x38, 0xec, 0x9e, 0x52, 0xb5, 0xf5, 0x1c, 0x72,
            0xab, 0xc2, 0xe9, 0xc8, 0x35, 0xf6, 0x4c, 0x3a,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^792", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0xf8, 0x69, 0x9e, 0xef, 0x3f, 0xf2, 0xb1, 0x10,
            0xf1, 0xed, 0xc1, 0xc3, 0x85, 0xf5, 0x93, 0x82,
            0x2a, 0x3c, 0xcd, 0xf7, 0x71, 0x98, 0xb8, 0xec,
            0xef, 0x1a, 0xd6, 0x40, 0x70, 0xd0, 0xe4, 0xb7,
            0xbc, 0x52, 0x20, 0x29, 0xb7, 0x23, 0xf8, 0x39,
            0xa9, 0x02, 0x34, 0x38, 0xec, 0x9e, 0x52, 0xb5,
            0xf5, 0x1c, 0x72, 0xab, 0xc2, 0xe9, 0xc8, 0x35,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^816", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x7b, 0xcc, 0xe8, 0x37, 0x2d, 0xbc, 0x60, 0x30,
            0x23, 0xc3, 0x16, 0x12, 0xe6, 0x2e, 0x06, 0x8b,
            0x06, 0x35, 0x43, 0x00, 0x5c, 0xd7, 0xa9, 0x6f,
            0x08, 0x77, 0xd2, 0xbb, 0x9c, 0x1a, 0xaf, 0x70,
            0xd0, 0xe4, 0xb7, 0xbc, 0x52, 0x20, 0x29, 0xb7,
            0x23, 0xf8, 0x39, 0xa9, 0x02, 0x34, 0x38, 0xec,
            0x9e, 0x52, 0xb5, 0xf5, 0x1c, 0x72, 0xab, 0x02,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^840", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x28, 0xeb, 0xf3, 0x45, 0xf9, 0x16, 0xa8, 0x41,
            0x88, 0x7a, 0xa8, 0x45, 0xbe, 0x39, 0x39, 0xb1,
            0xbe, 0xb0, 0xaf, 0x8a, 0x1f, 0x52, 0x53, 0x23,
            0x78, 0xf6, 0x1c, 0x89, 0xa3, 0x4b, 0xc1, 0x9c,
            0x1a, 0xaf, 0x70, 0xd0, 0xe4, 0xb7, 0xbc, 0x52,
            0x20, 0x29, 0xb7, 0x23, 0xf8, 0x39, 0xa9, 0x02,
            0x34, 0x38, 0xec, 0x9e, 0x52, 0xb5, 0xf5, 0x1c,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^864", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0xd1, 0x7f, 0xc2, 0xd4, 0xff, 0x7b, 0x42, 0x1b,
            0x5a, 0x4b, 0xd1, 0x09, 0xe8, 0x6c, 0xc6, 0xaa,
            0x81, 0x53, 0x1a, 0xb2, 0x00, 0x19, 0x85, 0x5c,
            0x4b, 0xd8, 0xea, 0x87, 0x44, 0x7c, 0xc4, 0xa3,
            0x4b, 0xc1, 0x9c, 0x1a, 0xaf, 0x70, 0xd0, 0xe4,
            0xb7, 0xbc, 0x52, 0x20, 0x29, 0xb7, 0x23, 0xf8,
            0x39, 0xa9, 0x02, 0x34, 0x38, 0xec, 0x9e, 0x12,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^888", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00,

            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0xf0, 0xd7, 0xf1, 0xac, 0xd2, 0xfd, 0xec, 0x58,
            0x00, 0x8f, 0xce, 0x87, 0x50, 0x1d, 0xba, 0x76,
            0xd6, 0x59, 0x84, 0x9c, 0xbe, 0x66, 0xd2, 0xc3,
            0x44, 0xc4, 0x8f, 0xff, 0xce, 0x17, 0xae, 0x44,
            0x7c, 0xc4, 0xa3, 0x4b, 0xc1, 0x9c, 0x1a, 0xaf,
            0x70, 0xd0, 0xe4, 0xb7, 0xbc, 0x52, 0x20, 0x29,
            0xb7, 0x23, 0xf8, 0x39, 0xa9, 0x02, 0x34, 0x38,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("2^912 - 1", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff,

            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0x81, 0xde, 0xe7, 0x31, 0xa9, 0x3f, 0x88, 0x11,
            0x2e, 0x1d, 0xad, 0x87, 0x07, 0x16, 0x0f, 0x80,
            0x29, 0x3e, 0xa6, 0x37, 0xfb, 0x19, 0xe3, 0x20,
            0xc5, 0xb6, 0x24, 0xbb, 0x85, 0xc9, 0x72, 0xcf,
            0x17, 0xae, 0x44, 0x7c, 0xc4, 0xa3, 0x4b, 0xc1,
            0x9c, 0x1a, 0xaf, 0x70, 0xd0, 0xe4, 0xb7, 0xbc,
            0x52, 0x20, 0x29, 0xb7, 0x23, 0xf8, 0x39, 0x29,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })

    t.Run("blank", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetUniformBytes([]byte{
            0x54, 0x3e, 0xc1, 0x27, 0x80, 0xaa, 0xf3, 0x2c,
            0x89, 0xa8, 0xe6, 0xe6, 0x8a, 0xe9, 0xbe, 0xf7,
            0x28, 0x24, 0xe1, 0x12, 0x37, 0x83, 0x11, 0xa8,
            0x11, 0x97, 0x6e, 0xe9, 0xa9, 0xd7, 0xc0, 0x10,
            0x25, 0x04, 0x9f, 0x27, 0x9d, 0x9a, 0x20, 0xfe,
            0xe3, 0x8c, 0xfb, 0xde, 0x90, 0xe9, 0xcf, 0x4a,
            0xb2, 0xc5, 0xca, 0xd2, 0xd7, 0xa7, 0xab, 0x0d,
            0x19,

            0xdd, 0xc7, 0xbc, 0x77, 0x29, 0xd3, 0xfc, 0x6d,
            0x77, 0x36, 0x4e, 0x52, 0x58, 0x04, 0xcb, 0x23,
            0xa3, 0x7a, 0xbd, 0x90, 0x55, 0x58, 0x77, 0x8f,
            0x7e, 0x5f, 0x98, 0xc6, 0x5d, 0x2a, 0x6c, 0x34,
            0xdc, 0xbe, 0x7c, 0xff, 0xed, 0xd2, 0x2d, 0xe4,
            0x55, 0x85, 0x49, 0x02, 0x77, 0x3f, 0x03, 0x47,
            0xe2, 0xeb, 0x2b, 0xa9, 0xb7, 0x9c, 0xbf, 0xd8,
            0xd8,
        })
        if err != nil {
            t.Fatal(err)
        }
        v := &Scalar{[56]byte{
            0xd0, 0x80, 0x23, 0x10, 0xcf, 0x0f, 0xfd, 0xc8,
            0x09, 0x95, 0xc1, 0x72, 0xa5, 0x1b, 0xce, 0x2f,
            0x05, 0x55, 0x57, 0x27, 0x8e, 0xf1, 0x47, 0xdc,
            0x8d, 0xef, 0xa6, 0x04, 0x0a, 0xf0, 0xec, 0x19,
            0x4a, 0xca, 0x57, 0xa5, 0xba, 0xcb, 0xf3, 0xbc,
            0x9c, 0x2c, 0xb9, 0xd6, 0x9f, 0x8e, 0x65, 0x91,
            0xcc, 0x2f, 0xee, 0x4c, 0xb8, 0xe6, 0xf8, 0x15,
        }}
        if s.Equal(v) == 0 {
            t.Errorf("got %s, want %s", s, v)
        }
    })
}

func BenchmarkTestSetUniformBytes(b *testing.B) {
    s := NewScalar()
    data := []byte{
        0xf2, 0x44, 0x58, 0xab, 0x92, 0xc2, 0x78, 0x23,
        0x55, 0x8f, 0xc5, 0x8d, 0x72, 0xc2, 0x6c, 0x21,
        0x90, 0x36, 0xd6, 0xae, 0x49, 0xdb, 0x4e, 0xc4,
        0xe9, 0x23, 0xca, 0x7c, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
        0x00,

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00,
    }
    b.ResetTimer()
    for i := 0; i < b.N; i++ {
        _, err := s.SetUniformBytes(data)
        if err != nil {
            b.Fatal(err)
        }
    }
}

func TestSetCanonicalBytes(t *testing.T) {
    t.Run("valid input", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetCanonicalBytes([]byte{
            0xf2, 0x44, 0x58, 0xab, 0x92, 0xc2, 0x78, 0x23,
            0x55, 0x8f, 0xc5, 0x8d, 0x72, 0xc2, 0x6c, 0x21,
            0x90, 0x36, 0xd6, 0xae, 0x49, 0xdb, 0x4e, 0xc4,
            0xe9, 0x23, 0xca, 0x7c, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
            0x00,
        })
        if err != nil {
            t.Fatal(err)
        }
        if s.Equal(NewScalar()) == 1 {
            t.Fatal("s should not be zero, but it is")
        }
    })

    t.Run("not reduced", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetCanonicalBytes([]byte{
            0xf3, 0x44, 0x58, 0xab, 0x92, 0xc2, 0x78, 0x23,
            0x55, 0x8f, 0xc5, 0x8d, 0x72, 0xc2, 0x6c, 0x21,
            0x90, 0x36, 0xd6, 0xae, 0x49, 0xdb, 0x4e, 0xc4,
            0xe9, 0x23, 0xca, 0x7c, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
            0x00,
        })
        if err == nil {
            t.Fatal(err)
        }
        if s.Equal(NewScalar()) == 0 {
            t.Fatal("s should be zero, but it is not")
        }
    })

    t.Run("invalid Most Significant Bit", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetCanonicalBytes([]byte{
            0xf2, 0x44, 0x58, 0xab, 0x92, 0xc2, 0x78, 0x23,
            0x55, 0x8f, 0xc5, 0x8d, 0x72, 0xc2, 0x6c, 0x21,
            0x90, 0x36, 0xd6, 0xae, 0x49, 0xdb, 0x4e, 0xc4,
            0xe9, 0x23, 0xca, 0x7c, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
            0x80,
        })
        if err == nil {
            t.Fatal(err)
        }
        if s.Equal(NewScalar()) == 0 {
            t.Fatal("s should be zero, but it is not")
        }
    })

    t.Run("short long", func(t *testing.T) {
        s := NewScalar()
        _, err := s.SetCanonicalBytes([]byte{
            0xf2, 0x44, 0x58, 0xab, 0x92, 0xc2, 0x78, 0x23,
            0x55, 0x8f, 0xc5, 0x8d, 0x72, 0xc2, 0x6c, 0x21,
            0x90, 0x36, 0xd6, 0xae, 0x49, 0xdb, 0x4e, 0xc4,
            0xe9, 0x23, 0xca, 0x7c, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
        })
        if err == nil {
            t.Fatal(err)
        }
        if s.Equal(NewScalar()) == 0 {
            t.Fatal("s should be zero, but it is not")
        }
    })
}

func TestMullAdd(t *testing.T) {
    t.Run("(-1) * 1 + 0 = -1", func(t *testing.T) {
        var v Scalar
        v.MulAdd(&scMinusOne, &scOne, &scZero)
        if v.Equal(&scMinusOne) == 0 {
            t.Errorf("got %x, want %x", v.Bytes(), scZero.Bytes())
        }
    })

    t.Run("(-1) * (-1) + (-1) = 0", func(t *testing.T) {
        var v Scalar
        v.MulAdd(&scMinusOne, &scMinusOne, &scMinusOne)
        if v.Equal(&scZero) == 0 {
            t.Errorf("got %x, want %x", v.Bytes(), scZero.Bytes())
        }
    })
}

func TestMulAdd_Check(t *testing.T) {
    l, _ := new(big.Int).SetString("181709681073901722637330951972001133588410340171829515070372549795146003961539585716195755291692375963310293709091662304773755859649779", 10)
    f := func(a, b, c [57]byte) bool {
        var v, s, q, r Scalar
        s.SetBytesWithClamping(a[:])
        q.SetBytesWithClamping(b[:])
        r.SetBytesWithClamping(c[:])
        v.MulAdd(&s, &q, &r)
        got := v.toBig(new(big.Int))

        ss := s.toBig(new(big.Int))
        qq := q.toBig(new(big.Int))
        rr := r.toBig(new(big.Int))
        want := new(big.Int).Mul(ss, qq)
        want.Add(want, rr)
        want.Mod(want, l)
        return got.Cmp(want) == 0
    }

    err := quick.Check(f, &quick.Config{
        MaxCountScale: 20,
    })
    if err != nil {
        t.Error(err)
    }
}

func (s *Scalar) toBig(v *big.Int) *big.Int {
    var buf [56]byte
    copy(buf[:], s.s[:])
    for i := 0; i < len(buf)/2; i++ {
        buf[i], buf[len(buf)-i-1] = buf[len(buf)-i-1], buf[i]
    }
    return v.SetBytes(buf[:])
}

func TestScalarNonAdjacentForm(t *testing.T) {
    s := Scalar{[56]byte{
        0x0d, 0xbb, 0xa7, 0x54, 0x6d, 0x3d, 0x87, 0xdc,
        0xaa, 0x70, 0x3a, 0x72, 0x8d, 0x3d, 0x93, 0xde,
        0x6f, 0xc9, 0x29, 0x51, 0xb6, 0x24, 0xb1, 0x3b,
        0x16, 0xdc, 0x35, 0x83, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    }}
    expectedNAF := [448]int8{
        13, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -11, 0,
        0, 0, 0, -11, 0, 0, 0, 0, 11, 0, 0, 0, 0, -5, 0, 0, 0, 0, -5, 0, 0,
        0, 0, 0, 0, -3, 0, 0, 0, 0, -15, 0, 0, 0, 0, -3, 0, 0, 0, 0, -9, 0,
        0, 0, 0, 11, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, -3, 0, 0, 0,
        0, 9, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, -5, 0, 0, 0,
        0, 0, 0, 13, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 15, 0, 0, 0, 0, -1, 0, 0,
        0, 0, 0, -9, 0, 0, 0, 0, 5, 0, 0, 0, 0, 7, 0, 0, 0, 0, 5, 0, 0, 0,
        0, -15, 0, 0, 0, 0, -13, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 5, 0, 0, 0,
        0, 9, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 11,
        0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 13, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
    }

    sNAF := s.nonAdjacentForm(5)

    for i := 0; i < len(expectedNAF); i++ {
        if expectedNAF[i] != sNAF[i] {
            t.Errorf("Wrong digit at position %d, got %d, expected %d", i, sNAF[i], expectedNAF[i])
        }
    }
}
