package rc6

import (
    "bytes"
    "testing"
)

var tests = []struct {
    key    []byte
    plain  []byte
    cipher []byte
}{
    // https://www.cosic.esat.kuleuven.be/nessie/testvectors/bc/rc6/Rc6-128-128.verified.test-vectors
    {
        []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
        []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
        []byte{0x09, 0xC2, 0x61, 0x43, 0xB4, 0x7B, 0x1A, 0x22, 0xEC, 0x2D, 0x9C, 0xD8, 0xB8, 0xA4, 0xE5, 0x73},
    },
    {
        []byte{0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF, 0x48},
        []byte{0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84, 0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84},
        []byte{0xFF, 0xA0, 0x1C, 0x30, 0x99, 0x67, 0xFD, 0x61, 0x9C, 0x58, 0xAB, 0x1C, 0xC4, 0xBC, 0xA9, 0x8D},
    },
    {
        []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
        []byte{0xB8, 0x4E, 0x1F, 0x38, 0x06, 0x24, 0xFE, 0xD8, 0xC8, 0xC6, 0x40, 0xCB, 0x28, 0xB6, 0xD9, 0xED},
        []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
    },
    {

        []byte{0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF, 0x48},
        []byte{0xDE, 0x60, 0xBD, 0x4F, 0x1C, 0x95, 0x53, 0x22, 0xD2, 0x52, 0xB7, 0x95, 0x77, 0x71, 0xB8, 0xB5},
        []byte{0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84, 0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84},
    },
}

func TestRC6(t *testing.T) {

    for _, tst := range tests {

        c, _ := NewCipher(tst.key)

        var ct [16]byte

        c.Encrypt(ct[:], tst.plain[:])

        if !bytes.Equal(ct[:], tst.cipher) {
            t.Errorf("encrypt failed:\ngot : % 02x\nwant: % 02x", ct[:], tst.cipher)
        }

        var p [16]byte

        c.Decrypt(p[:], ct[:])

        if !bytes.Equal(p[:], tst.plain) {
            t.Errorf("decrypt failed:\ngot : % 02x\nwant: % 02x", p[:], tst.plain)
        }
    }
}
