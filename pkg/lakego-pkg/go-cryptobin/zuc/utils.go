package zuc

import (
    "encoding/binary"
)

var KD = [16]uint32{
    0x44D7,0x26BC,0x626B,0x135E,0x5789,0x35E2,0x7135,0x09AF,
    0x4D78,0x2F13,0x6BC4,0x1AF1,0x5E26,0x3C4D,0x789A,0x47AC,
}

var S0 = [256]uint8{
    0x3e,0x72,0x5b,0x47,0xca,0xe0,0x00,0x33,0x04,0xd1,0x54,0x98,0x09,0xb9,0x6d,0xcb,
    0x7b,0x1b,0xf9,0x32,0xaf,0x9d,0x6a,0xa5,0xb8,0x2d,0xfc,0x1d,0x08,0x53,0x03,0x90,
    0x4d,0x4e,0x84,0x99,0xe4,0xce,0xd9,0x91,0xdd,0xb6,0x85,0x48,0x8b,0x29,0x6e,0xac,
    0xcd,0xc1,0xf8,0x1e,0x73,0x43,0x69,0xc6,0xb5,0xbd,0xfd,0x39,0x63,0x20,0xd4,0x38,
    0x76,0x7d,0xb2,0xa7,0xcf,0xed,0x57,0xc5,0xf3,0x2c,0xbb,0x14,0x21,0x06,0x55,0x9b,
    0xe3,0xef,0x5e,0x31,0x4f,0x7f,0x5a,0xa4,0x0d,0x82,0x51,0x49,0x5f,0xba,0x58,0x1c,
    0x4a,0x16,0xd5,0x17,0xa8,0x92,0x24,0x1f,0x8c,0xff,0xd8,0xae,0x2e,0x01,0xd3,0xad,
    0x3b,0x4b,0xda,0x46,0xeb,0xc9,0xde,0x9a,0x8f,0x87,0xd7,0x3a,0x80,0x6f,0x2f,0xc8,
    0xb1,0xb4,0x37,0xf7,0x0a,0x22,0x13,0x28,0x7c,0xcc,0x3c,0x89,0xc7,0xc3,0x96,0x56,
    0x07,0xbf,0x7e,0xf0,0x0b,0x2b,0x97,0x52,0x35,0x41,0x79,0x61,0xa6,0x4c,0x10,0xfe,
    0xbc,0x26,0x95,0x88,0x8a,0xb0,0xa3,0xfb,0xc0,0x18,0x94,0xf2,0xe1,0xe5,0xe9,0x5d,
    0xd0,0xdc,0x11,0x66,0x64,0x5c,0xec,0x59,0x42,0x75,0x12,0xf5,0x74,0x9c,0xaa,0x23,
    0x0e,0x86,0xab,0xbe,0x2a,0x02,0xe7,0x67,0xe6,0x44,0xa2,0x6c,0xc2,0x93,0x9f,0xf1,
    0xf6,0xfa,0x36,0xd2,0x50,0x68,0x9e,0x62,0x71,0x15,0x3d,0xd6,0x40,0xc4,0xe2,0x0f,
    0x8e,0x83,0x77,0x6b,0x25,0x05,0x3f,0x0c,0x30,0xea,0x70,0xb7,0xa1,0xe8,0xa9,0x65,
    0x8d,0x27,0x1a,0xdb,0x81,0xb3,0xa0,0xf4,0x45,0x7a,0x19,0xdf,0xee,0x78,0x34,0x60,
}

var S1 = [256]uint8{
    0x55,0xc2,0x63,0x71,0x3b,0xc8,0x47,0x86,0x9f,0x3c,0xda,0x5b,0x29,0xaa,0xfd,0x77,
    0x8c,0xc5,0x94,0x0c,0xa6,0x1a,0x13,0x00,0xe3,0xa8,0x16,0x72,0x40,0xf9,0xf8,0x42,
    0x44,0x26,0x68,0x96,0x81,0xd9,0x45,0x3e,0x10,0x76,0xc6,0xa7,0x8b,0x39,0x43,0xe1,
    0x3a,0xb5,0x56,0x2a,0xc0,0x6d,0xb3,0x05,0x22,0x66,0xbf,0xdc,0x0b,0xfa,0x62,0x48,
    0xdd,0x20,0x11,0x06,0x36,0xc9,0xc1,0xcf,0xf6,0x27,0x52,0xbb,0x69,0xf5,0xd4,0x87,
    0x7f,0x84,0x4c,0xd2,0x9c,0x57,0xa4,0xbc,0x4f,0x9a,0xdf,0xfe,0xd6,0x8d,0x7a,0xeb,
    0x2b,0x53,0xd8,0x5c,0xa1,0x14,0x17,0xfb,0x23,0xd5,0x7d,0x30,0x67,0x73,0x08,0x09,
    0xee,0xb7,0x70,0x3f,0x61,0xb2,0x19,0x8e,0x4e,0xe5,0x4b,0x93,0x8f,0x5d,0xdb,0xa9,
    0xad,0xf1,0xae,0x2e,0xcb,0x0d,0xfc,0xf4,0x2d,0x46,0x6e,0x1d,0x97,0xe8,0xd1,0xe9,
    0x4d,0x37,0xa5,0x75,0x5e,0x83,0x9e,0xab,0x82,0x9d,0xb9,0x1c,0xe0,0xcd,0x49,0x89,
    0x01,0xb6,0xbd,0x58,0x24,0xa2,0x5f,0x38,0x78,0x99,0x15,0x90,0x50,0xb8,0x95,0xe4,
    0xd0,0x91,0xc7,0xce,0xed,0x0f,0xb4,0x6f,0xa0,0xcc,0xf0,0x02,0x4a,0x79,0xc3,0xde,
    0xa3,0xef,0xea,0x51,0xe6,0x6b,0x18,0xec,0x1b,0x2c,0x80,0xf7,0x74,0xe7,0xff,0x21,
    0x5a,0x6a,0x54,0x1e,0x41,0x31,0x92,0x35,0xc4,0x33,0x07,0x0a,0xba,0x7e,0x0e,0x34,
    0x88,0xb1,0x98,0x7c,0xf3,0x3d,0x60,0x6c,0x7b,0xca,0xd3,0x1f,0x32,0x65,0x04,0x28,
    0x64,0xbe,0x85,0x9b,0x2f,0x59,0x8a,0xd7,0xb0,0x25,0xac,0xaf,0x12,0x03,0xe2,0xf2,
}

func MemsetByte(a []byte, v byte) {
    if len(a) == 0 {
        return
    }

    a[0] = v
    for bp := 1; bp < len(a); bp *= 2 {
        copy(a[bp:], a[:bp])
    }
}

// Endianness option
const littleEndian bool = true

func bytesToUint32s(b []byte) []uint32 {
    size := len(b) / 4
    dst := make([]uint32, size)

    for i := 0; i < size; i++ {
        j := i * 4

        if littleEndian {
            dst[i] = binary.LittleEndian.Uint32(b[j:])
        } else {
            dst[i] = binary.BigEndian.Uint32(b[j:])
        }
    }

    return dst
}

func uint32sToBytes(w []uint32) []byte {
    size := len(w) * 4
    dst := make([]byte, size)

    for i := 0; i < len(w); i++ {
        j := i * 4

        if littleEndian {
            binary.LittleEndian.PutUint32(dst[j:], w[i])
        } else {
            binary.BigEndian.PutUint32(dst[j:], w[i])
        }
    }

    return dst
}

func GETU32(ptr []byte) uint32 {
    return uint32(ptr[0]) << 24 |
           uint32(ptr[1]) << 16 |
           uint32(ptr[2]) <<  8 |
           uint32(ptr[3])
}

func PUTU32(ptr []byte, a uint32) {
    ptr[0] = byte(a >> 24)
    ptr[1] = byte(a >> 16)
    ptr[2] = byte(a >>  8)
    ptr[3] = byte(a)
}

func ADD31(a *uint32, b uint32) {
    (*a) += b
    (*a) = ((*a) & 0x7fffffff) + ((*a) >> 31)
}

func ROT31(a, k uint32) uint32 {
    return ((a << k) | (a >> (31 - k))) & 0x7FFFFFFF
}

func ROT32(a, k uint32) uint32 {
    return (a << k) | (a >> (32 - k))
}

func L1(X uint32) uint32 {
    return (X ^
            ROT32(X,  2) ^
            ROT32(X, 10) ^
            ROT32(X, 18) ^
            ROT32(X, 24))
}

func L2(X uint32) uint32 {
    return (X ^
            ROT32(X,  8) ^
            ROT32(X, 14) ^
            ROT32(X, 22) ^
            ROT32(X, 30))
}

func LFSRWithInitialisationMode(u uint32, LFSR []uint32) {
    V := LFSR[0]

    ADD31(&V, ROT31(LFSR[0], 8))
    ADD31(&V, ROT31(LFSR[4], 20))
    ADD31(&V, ROT31(LFSR[10], 21))
    ADD31(&V, ROT31(LFSR[13], 17))
    ADD31(&V, ROT31(LFSR[15], 15))
    ADD31(&V, u)

    for j := 0; j < 15; j++ {
        LFSR[j] = LFSR[j + 1]
    }

    LFSR[15] = V
}

func LFSRWithWorkMode(LFSR []uint32) {
    var j int32
    var a uint64 = uint64(LFSR[0])

    a += uint64(LFSR[0]) << 8
    a += uint64(LFSR[4]) << 20
    a += uint64(LFSR[10]) << 21
    a += uint64(LFSR[13]) << 17
    a += uint64(LFSR[15]) << 15
    a = (a & 0x7fffffff) + (a >> 31)

    V := uint32((a & 0x7fffffff) + (a >> 31))

    for j = 0; j < 15; j++ {
        LFSR[j] = LFSR[j + 1]
    }

    LFSR[15] = V
}

func BitReconstruction2(X1, X2 *uint32, LFSR []uint32) {
    (*X1) = ((LFSR[11] & 0xFFFF) << 16) | (LFSR[9] >> 15)
    (*X2) = ((LFSR[7] & 0xFFFF) << 16) | (LFSR[5] >> 15)
}

func BitReconstruction3(X0, X1, X2 *uint32, LFSR []uint32) {
    (*X0) = ((LFSR[15] & 0x7FFF8000) << 1) | (LFSR[14] & 0xFFFF)

    BitReconstruction2(X1, X2, LFSR)
}

func BitReconstruction4(X0, X1, X2, X3 *uint32, LFSR []uint32) {
    BitReconstruction3(X0, X1, X2, LFSR)

    (*X3) = ((LFSR[2] & 0xFFFF) << 16) | (LFSR[0] >> 15)
}

func MAKEU31(k uint8, d uint32, iv uint8) uint32 {
    return uint32(k) << 23 |
           uint32(d) <<  8 |
           uint32(iv)
}

func MAKEU32(a, b, c, d uint8) uint32 {
    return uint32(a) << 24 |
           uint32(b) << 16 |
           uint32(c) <<  8 |
           uint32(d)
}

func F_(R1, R2 *uint32, X1, X2 uint32) {
    W1 := (*R1) + X1
    W2 := (*R2) ^ X2

    U := L1((W1 << 16) | (W2 >> 16))
    V := L2((W2 << 16) | (W1 >> 16))

    (*R1) = MAKEU32(
            S0[U >> 24],
            S1[(U >> 16) & 0xFF],
            S0[(U >> 8) & 0xFF],
            S1[U & 0xFF],
        )
    (*R2) = MAKEU32(
            S0[V >> 24],
            S1[(V >> 16) & 0xFF],
            S0[(V >> 8) & 0xFF],
            S1[V & 0xFF],
        )
}

func F(R1, R2 *uint32, X0, X1, X2 uint32) uint32 {
    r := (X0 ^ (*R1)) + (*R2)

    F_(R1, R2, X1, X2)

    return r
}
